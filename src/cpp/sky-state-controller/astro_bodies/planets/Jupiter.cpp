#include "../../world_state/AstroTime.h"
#include "../../Constants.h"
#include "../OtherPlanet.h"
#include "Earth.h"
#include "Jupiter.h"
#include <cmath>

//
//Constructor
//
Jupiter::Jupiter(AstroTime* astroTimeRef) : OtherPlanet(astroTimeRef){
  //
  //Default constructor
  //
};

//From page 286 of Meeus
void Jupiter::updateMagnitudeOfPlanet(){
  double phaseAngle = getPhaseAngleInDegrees();
  irradianceFromEarth = -9.40 + 5.0 * log(distanceFromSun * distanceFromEarth) + 0.005 * phaseAngle;
};

void Jupiter::updateEclipticalLongitude(){
  const double L_0_A[64] = {59954691.494, 9695898.719, 573610.142, 306389.205,
  97178.296, 72903.078, 64263.975, 39806.064, 38857.767, 27964.629, 13589.73,
  8246.349, 8768.704, 7368.042, 6263.15, 6114.062, 4905.396, 5305.285, 5305.441,
  4647.248, 3045.023, 2609.999, 2028.191, 1764.763, 1722.972, 1920.945, 1633.223,
  1431.999, 973.272, 884.457, 732.853, 731.094, 691.971, 709.166, 614.482, 495.219,
  581.903, 375.664, 389.876, 341.016, 330.458, 440.853, 417.267, 244.174, 261.541,
  256.589, 261.005, 220.381, 201.991, 207.336, 197.061, 235.139, 174.827, 149.385,
  175.197, 175.172, 157.917, 137.898, 117.498, 150.504, 116.786, 105.894, 130.54,
  141.388};
  const double L_0_B[64] = {0.0, 5.06191793158, 1.44406205629, 5.41734730184, 4.14264726552,
  3.64042916389, 3.41145165351, 2.29376740788, 1.27231755835, 1.7845459182, 5.7748104079,
  3.5822792584, 3.63000308199, 5.0810119427, 0.02497628807, 4.51319998626, 1.32084470588,
  1.30671216791, 4.18625634012, 4.69958103684, 4.31676431084, 1.56667394063, 1.06376530715,
  2.14148655117, 3.88036268267, 0.97168196472, 3.58201833555, 4.29685556046, 4.09764549134,
  2.43700227469, 6.08535124451, 3.80592308125, 6.13365277914, 1.2927476033, 4.10850580886,
  3.75564106217, 4.53969579398, 4.70304250208, 4.89706786539, 5.7145237931, 4.74049819491,
  2.95818598959, 1.03554397138, 5.22024286247, 1.87652515753, 3.72410394286, 0.82048379203,
  1.65114584814, 1.80692992449, 1.85463683689, 5.29255821015, 1.22694468346, 5.90974976879,
  4.37744775359, 3.22647697998, 3.7297744122, 4.36478445901, 1.31800455202, 2.50021486074,
  3.90624455135, 3.3892092106, 4.55439354032, 4.16876671917, 3.13579930728};
  const double L_0_C[64] = {0.0, 529.690965095, 7.1135470008, 1059.38193019, 632.783739313,
  522.577418094, 103.092774219, 419.484643875, 316.391869657, 536.804512095, 1589.07289528,
  206.185548437, 949.17560897, 735.876513532, 213.299095438, 1162.47470441, 110.206321219,
  14.2270940016, 1052.26838319, 3.9321532631, 426.598190876, 846.082834751, 3.1813937377,
  1066.49547719, 1265.56747863, 639.897286314, 515.463871093, 625.670192312, 95.9792272178,
  412.371096874, 838.96928775, 1581.95934828, 2118.76386038, 742.990060533, 1478.86657406,
  323.505416657, 309.278322656, 1368.66025285, 1692.1656695, 533.623118358, 0.0481841098,
  454.909366527, 2.4476805548, 728.762966531, 0.9632078465, 199.072001436, 380.12776796,
  543.918059096, 1375.77379985, 525.758811831, 1155.36115741, 909.818733055, 956.289155971,
  1685.0521225, 1898.35121794, 942.062061969, 1795.25844372, 1169.58825141, 1596.18644228,
  74.7815985673, 0.5212648618, 526.509571357, 1045.15483619, 491.557929457};

  double L0 = 0.0;
  for(int i = 0; i < 72; ++i){
    L0 += L_0_A[i] * cos(L_0_B[i] + L_0_C[i] * astroTime->julianCentury);
  }

  const double L_1_A[61] = {52969096508.8, 489503.243, 228917.222, 30099.479, 20720.92,
  12103.653, 6067.987, 5433.968, 4237.744, 2211.974, 1983.502, 1295.769, 1163.416,
  1007.167, 1174.094, 847.762, 827.25, 829.822, 1003.864, 1098.73, 724.923, 567.826,
  474.197, 412.936, 336.82, 345.412, 234.071, 194.827, 234.805, 183.904, 198.512,
  186.807, 171.405, 130.777, 134.095, 115.444, 106.501, 66.832, 69.619, 59.95,
  63.366, 79.718, 65.635, 58.519, 56.61, 71.631, 57.343, 55.048, 52.026, 52.295,
  50.427, 47.278, 42.199, 46.566, 32.801, 33.556, 29.379, 29.311, 32.449, 29.741,
  21.789};
  const double L_1_B[61] = {0.0, 4.2208293947, 6.02646855621, 4.54540782858, 5.45943156902,
  0.16994816098, 4.42422292017, 3.98480737746, 5.89008707199, 5.26766687382, 4.88600705699,
  5.55132752171, 0.51450634873, 0.46474690033, 5.84238857133, 5.75765726863, 4.80311857692,
  0.59345481695, 3.14841622246, 5.30705242117, 5.51690038433, 5.98865760444, 4.1324371636,
  5.73653788228, 3.72892266066, 4.24128387922, 6.24295755869, 2.21824346028, 4.03315571261,
  6.2797391951, 1.50446971008, 6.07956275814, 5.41658811525, 0.62641588161, 5.23702273624,
  0.6778374723, 4.4767172424, 5.73362353275, 5.9725637809, 1.0065747379, 6.05635396519,
  5.821567337, 0.12938321631, 0.58687309667, 1.41183572003, 5.34149334443, 5.9687033662,
  5.42871116938, 0.22999191591, 5.72636754267, 6.08258832558, 3.60428393787, 4.13113112919,
  0.51168261375, 5.03520269183, 0.09960615979, 3.35927110207, 0.75894050642, 5.37487176787,
  5.42345191096, 6.14949766217};
  const double L_1_C[61] = {0.0, 529.690965095, 7.1135470008, 1059.38193019, 522.577418094,
  536.804512095, 103.092774219, 419.484643875, 14.2270940016, 206.185548437, 1589.07289528,
  3.1813937377, 3.9321532631, 735.876513532, 1052.26838319, 110.206321219, 213.299095438,
  1066.49547719, 426.598190876, 515.463871093, 639.897286314, 625.670192312, 412.371096874,
  95.9792272178, 1162.47470441, 632.783739313, 309.278322656, 323.505416657, 949.17560897,
  543.918059096, 838.96928775, 742.990060533, 199.072001436, 728.762966531, 2118.76386038,
  846.082834751, 956.289155971, 21.3406410024, 532.872358832, 1596.18644228, 1581.95934828,
  1045.15483619, 526.509571357, 1155.36115741, 533.623118358, 942.062061969, 1169.58825141,
  10.2949407385, 1368.66025285, 117.31986822, 525.758811831, 1478.86657406, 1692.1656695,
  1265.56747863, 220.412642439, 302.164775655, 4.665866446, 88.865680217, 508.350324092,
  1272.68102563, 1685.0521225};

  double L1 = 0.0;
  for(int i = 0; i < 68; ++i){
    L1 += L_1_A[i] * cos(L_1_B[i] + L_1_C[i] * astroTime->julianCentury);
  }

  const double L_2_A[57] = {47233.601, 30649.436, 14837.605, 3189.359, 2728.901,
  2547.44, 1721.046, 383.277, 367.514, 377.503, 337.386, 308.194, 214.121, 203.945,
  197.456, 146.156, 156.209, 129.577, 141.825, 117.324, 96.673, 90.824, 78.757,
  72.393, 87.32, 56.885, 48.615, 58.472, 40.161, 39.773, 35.738, 25.61, 29.257,
  23.621, 27.79, 25.988, 25.259, 19.456, 16.16, 17.655, 17.714, 16.95, 14.656,
  13.717, 13.232, 12.771, 15.311, 10.924, 13.902, 9.462, 8.792, 7.851, 7.64, 9.055,
  8.687, 6.355, 6.615};
  const double L_2_B[57] = {4.32148536482, 2.929777887, 3.14159265359, 1.05515491122,
  4.84555421873, 3.42720888976, 4.18734600902, 5.76794364868, 6.05520169517, 0.7605083906,
  3.78644856157, 0.6936828379, 3.8295818143, 5.34259263233, 2.4835107179, 3.81335105293,
  1.36162315686, 5.83745710707, 1.63491733107, 1.41441723025, 4.03472268105, 1.10616181082,
  4.63773672633, 2.21660922294, 2.52152838765, 3.12193937495, 1.67250930065, 0.83261136328,
  4.02477739294, 0.62346681537, 2.32587552001, 2.52090555309, 3.60827234952, 3.00418693282,
  3.24029772587, 4.50541789846, 1.21368179972, 4.29184444888, 5.81618778562, 0.8091545878,
  4.21087482222, 1.83162996779, 3.99869563261, 1.80293013315, 2.51839383442, 4.3696527712,
  0.68283508612, 4.44465911708, 5.9586109821, 2.17903550202, 3.29010679292, 5.76115179798,
  2.7204502155, 1.63552089571, 3.31770180816, 0.49733352086, 2.18391508427};
  const double L_2_C[57] = {7.1135470008, 529.690965095, 0.0, 522.577418094, 536.804512095,
  1059.38193019, 14.2270940016, 419.484643875, 103.092774219, 515.463871093, 3.1813937377,
  206.185548437, 1589.07289528, 1066.49547719, 3.9321532631, 639.897286314, 1052.26838319,
  412.371096874, 426.598190876, 625.670192312, 110.206321219, 95.9792272178, 543.918059096,
  735.876513532, 632.783739313, 213.299095438, 309.278322656, 199.072001436, 21.3406410024,
  323.505416657, 728.762966531, 1162.47470441, 10.2949407385, 956.289155971, 838.96928775,
  742.990060533, 1045.15483619, 532.872358832, 1596.18644228, 508.350324092, 2118.76386038,
  526.509571357, 117.31986822, 302.164775655, 88.865680217, 1169.58825141, 942.062061969,
  525.758811831, 316.391869657, 1155.36115741, 220.412642439, 846.082834751, 533.623118358,
  1581.95934828, 831.85574075, 949.17560897, 1265.56747863};

  double L2 = 0.0;
  for(int i = 0; i < 63; ++i){
    L2 += L_2_A[i] * cos(L_2_B[i] + L_2_C[i] * astroTime->julianCentury);
  }

  const double L_3_A[39] = {6501.673, 1355.012, 470.691, 416.933, 352.87, 165.699,
  86.769, 34.458, 22.671, 23.76, 28.501, 19.722, 17.778, 19.709, 18.767, 17.015,
  16.179, 15.902, 13.421, 13.233, 12.676, 8.633, 6.718, 8.703, 6.529, 5.397, 5.685,
  7.504, 5.431, 3.997, 3.855, 3.811, 3.232, 2.931, 2.657, 2.556, 2.414, 2.657,
  1.935};
  const double L_3_B[39] = {2.5986292365, 1.34692775915, 2.47502798748, 3.24456258569,
  2.97380410245, 2.09182221854, 2.51454300081, 3.82181443085, 2.98178645046, 1.27416115958,
  2.44538595164, 2.10936654685, 2.59019838502, 1.40149363982, 1.58683219668, 2.29975384867,
  3.1543828742, 3.25713655347, 2.76078519881, 2.53761666317, 6.26512955217, 2.26532712763,
  3.42006598208, 1.76298942412, 4.03744539112, 5.2643257077, 2.51772778746, 0.0,
  2.90223114269, 4.30231913648, 3.52241347275, 4.08897954122, 1.4797215105, 4.35694383564,
  1.27257961451, 2.23303484585, 2.9182867642, 5.0155101339, 2.79590256973};
  const double L_3_C[39] = {7.1135470008, 529.690965095, 14.2270940016, 536.804512095,
  522.577418094, 1059.38193019, 515.463871093, 1066.49547719, 543.918059096, 412.371096874,
  206.185548437, 639.897286314, 1589.07289528, 419.484643875, 103.092774219, 21.3406410024,
  625.670192312, 1052.26838319, 95.9792272178, 199.072001436, 426.598190876, 110.206321219,
  309.278322656, 10.2949407385, 728.762966531, 323.505416657, 508.350324092, 0.0,
  1045.15483619, 88.865680217, 302.164775655, 735.876513532, 956.289155971, 1596.18644228,
  213.299095438, 117.31986822, 742.990060533, 838.96928775, 1169.58825141};

  double L3 = 0.0;
  for(int i = 0; i < 43; ++i){
    L3 += L_3_A[i] * cos(L_3_B[i] + L_3_C[i] * astroTime->julianCentury);
  }

  const double L_4_A[19] = {669.505, 99.965, 50.03, 43.69, 31.794, 14.735, 8.408,
  4.926, 4.563, 4.254, 3.1, 2.053, 1.764, 1.901, 1.69, 1.345, 1.211, 1.091, 0.971};
  const double L_4_B[19] = {0.85280378158, 0.74243651986, 1.65383477095, 5.81923759985,
  4.85865051639, 4.29065528652, 0.68386181768, 1.29899425511, 2.31453670801, 0.48193363691,
  3.00251285081, 0.39854167561, 4.90551864257, 4.2566097793, 4.25228443627, 5.06309624095,
  4.7143259874, 1.32037613765, 5.67505418481};
  const double L_4_C[19] = {7.1135470008, 14.2270940016, 536.804512095, 529.690965095,
  522.577418094, 515.463871093, 1059.38193019, 543.918059096, 1066.49547719, 21.3406410024,
  412.371096874, 639.897286314, 625.670192312, 199.072001436, 206.185548437, 1052.26838319,
  95.9792272178, 1589.07289528, 728.762966531};

  double L4 = 0.0;
  for(int i = 0; i < 20; ++i){
    L4 += L_4_A[i] * cos(L_4_B[i] + L_4_C[i] * astroTime->julianCentury);
  }

  const double L_5_A[5] = {49.639, 15.775, 4.326, 1.573, 0.819};
  const double L_5_B[5] = {5.2576992477, 5.24859620238, 0.02660738929, 1.18411087933,
  5.86582284529};
  const double L_5_C[5] = {7.1135470008, 14.2270940016, 536.804512095, 522.577418094,
  543.918059096};

  double L5 = 0.0;
  for(int i = 0; i < 5; ++i){
    L5 += L_5_A[i] * cos(L_5_B[i] + L_5_C[i] * astroTime->julianCentury);
  }

  double julianCenturyMultiple = 1.0;
  double LValues[5] = {L0, L1, L2, L3, L4};
  eclipticalLongitude = 0.0;
  for(int i = 0; i < 5; ++i){
    eclipticalLongitude += LValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  eclipticalLongitude = eclipticalLongitude / 1.0e-8;
}

void Jupiter::updateEclipticalLatitude(){
  const double B_0_A[26] = {2268615.702, 109971.634, 110090.358, 8101.428, 6043.996,
  6437.782, 1106.88, 941.651, 894.088, 767.28, 944.328, 684.219, 629.223, 835.861,
  531.671, 558.524, 464.449, 431.072, 351.433, 123.148, 115.038, 132.159, 103.402,
  116.379, 102.42, 103.762};
  const double B_0_B[26] = {3.55852606721, 3.90809347197, 0.0, 3.60509572885, 4.25883108339,
  0.30627119215, 2.9853440952, 2.93619073963, 1.75447402715, 2.15473604461, 1.67522315024,
  3.67808774854, 0.6434329002, 5.1788197781, 2.70305944444, 0.01354838161, 1.17337267936,
  2.6082502278, 4.61062966359, 3.34968047337, 5.04892367391, 4.7781694038, 2.31878940535,
  1.38688268881, 3.15294025567, 3.70104530617};
  const double B_0_C[26] = {529.690965095, 1059.38193019, 0.0, 522.577418094, 1589.07289528,
  536.804512095, 1162.47470441, 1052.26838319, 7.1135470008, 632.783739313, 426.598190876,
  213.299095438, 1066.49547719, 103.092774219, 110.206321219, 846.082834751, 949.17560897,
  419.484643875, 2118.76386038, 1692.1656695, 316.391869657, 742.990060533, 1478.86657406,
  323.505416657, 1581.95934828, 515.463871093};

  double B0 = 0.0;
  for(int i = 0; i < 29; ++i){
    B0 += B_0_A[i] * cos(B_0_B[i] + B_0_C[i] * astroTime->julianCentury);
  }

  const double B_1_A[22] = {78203.446, 7789.905, 2788.602, 2429.728, 1985.777,
  711.633, 292.916, 257.804, 271.233, 86.261, 79.683, 81.369, 81.666, 70.613,
  66.992, 58.497, 51.976, 41.188, 39.924, 40.237, 26.065, 31.305};
  const double B_1_B[22] = {1.52377859742, 2.59734071843, 4.85622679819, 5.45947255041,
  0.0, 3.13688338277, 5.27960297214, 4.76667796123, 0.10154920958, 1.08347893125,
  1.04738628033, 0.63901209639, 0.49217368092, 2.82219329635, 5.48215719084, 3.56648086507,
  2.85910965609, 4.75217333048, 3.9243378711, 1.1356429014, 5.69856804584, 6.03167547323};
  const double B_1_C[22] = {529.690965095, 1059.38193019, 536.804512095, 522.577418094,
  0.0, 1589.07289528, 1066.49547719, 1052.26838319, 7.1135470008, 103.092774219,
  110.206321219, 419.484643875, 426.598190876, 632.783739313, 515.463871093, 2118.76386038,
  949.17560897, 543.918059096, 735.876513532, 1162.47470441, 1596.18644228, 323.505416657};

  double B1 = 0.0;
  for(int i = 0; i < 24; ++i){
    B1 += B_1_A[i] * cos(B_1_B[i] + B_1_C[i] * astroTime->julianCentury);
  }

  const double B_2_A[14] = {5498.32, 602.076, 502.174, 453.862, 115.043, 68.911,
  67.052, 42.555, 39.396, 23.438, 17.383, 6.651, 7.013, 5.389};
  const double B_2_B[14] = {3.01596270062, 3.13358939436, 2.05202111599, 0.95912416388,
  0.0, 3.65515676096, 2.23363751256, 0.52143365809, 4.65314230657, 0.96725852073,
  3.0311625189, 4.14899100562, 2.58268666095, 5.43989474079};
  const double B_2_C[14] = {529.690965095, 536.804512095, 1059.38193019, 522.577418094,
  0.0, 1066.49547719, 1589.07289528, 1052.26838319, 7.1135470008, 515.463871093,
  543.918059096, 1596.18644228, 2118.76386038, 110.206321219};

  double B2 = 0.0;
  for(int i = 0; i < 15; ++i){
    B2 += B_2_A[i] * cos(B_2_B[i] + B_2_C[i] * astroTime->julianCentury);
  }

  const double B_3_A[9] = {185.332, 85.668, 56.359, 19.435, 10.858, 14.477, 5.535,
  4.939, 4.97};
  const double B_3_B[9] = {4.7927676149, 1.40023038638, 2.81574766965, 6.25741008684,
  2.04333735353, 0.0, 2.75732372347, 1.29727834284, 2.56009290021};
  const double B_3_C[9] = {529.690965095, 536.804512095, 522.577418094, 1059.38193019,
  1066.49547719, 0.0, 515.463871093, 543.918059096, 1052.26838319};

  double B3 = 0.0;
  for(int i = 0; i < 10; ++i){
    B3 += B_3_A[i] * cos(B_3_B[i] + B_3_C[i] * astroTime->julianCentury);
  }

  const double B_4_A[6] = {8.963, 5.28, 1.161, 1.104, 1.087, 0.818};
  const double B_4_B[6] = {5.9388723238, 4.80778878768, 0.46295890438, 4.53240452495,
  5.81789252627, 1.49293156118};
  const double B_4_C[6] = {536.804512095, 522.577418094, 1066.49547719, 515.463871093,
  543.918059096, 529.690965095};

  double B4 = 0.0;
  for(int i = 0; i < 6; ++i){
    B4 += B_4_A[i] * cos(B_4_B[i] + B_4_C[i] * astroTime->julianCentury);
  }

  const double B_5_A = 0.662;
  const double B_5_B = 4.10413626462;
  const double B_5_C = 536.804512095;
  double B5 = B_5_A * cos(B_5_B + B_5_C * astroTime->julianCentury);

  double julianCenturyMultiple = 1.0;
  double BValues[5] = {B0, B1, B2, B3, B4};
  eclipticalLatitude = 0.0;
  for(int i = 0; i < 5; ++i){
    eclipticalLatitude += BValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  eclipticalLatitude = eclipticalLatitude / 1.0e-8;
}

void Jupiter::updateRadiusVector(){
  const double R_0_A[46] = {520887429.326, 25209327.119, 610599.976, 282029.458,
  187647.346, 86792.905, 72062.974, 65517.248, 29134.542, 30135.335, 23453.271,
  22283.743, 23947.298, 13032.614, 9703.36, 12749.023, 9161.393, 7894.511, 7057.931,
  6137.703, 5477.001, 3502.493, 4136.822, 4169.954, 2499.967, 2616.976, 1912.009,
  2127.681, 1610.567, 1479.513, 1230.63, 1216.895, 961.113, 885.764, 776.583,
  998.591, 1014.733, 727.156, 655.334, 821.383, 620.818, 654.071, 811.993, 562.092,
  542.222, 457.841};
  const double R_0_B[46] = {0.0, 3.49108639871, 3.84115365948, 2.57419881293, 2.07590383214,
  0.71001145545, 0.21465724607, 5.9799588479, 1.67759379655, 2.16132003734, 3.54023522184,
  4.19362594399, 0.2745803748, 2.96042965363, 1.90669633585, 2.71550286592, 4.41352953117,
  2.47907592482, 2.18184839926, 6.26418240033, 5.65729989857, 0.56532365822, 2.722208724,
  2.01603822251, 4.55181655381, 2.00994012876, 0.85621128851, 6.12755221002, 3.08871452594,
  2.68021307468, 1.89052048109, 1.80176263029, 4.54876995367, 4.14783869943, 3.67710828843,
  2.87205397992, 1.38675822271, 3.98827252563, 2.7907259691, 1.59351544602, 4.82275194351,
  3.38140746852, 5.94093410097, 0.08114877791, 0.28357235311, 0.12720499202};
  const double R_0_C[46] = {0.0, 529.690965095, 1059.38193019, 632.783739313, 522.577418094,
  419.484643875, 536.804512095, 316.391869657, 103.092774219, 949.17560897, 735.876513532,
  1589.07289528, 7.1135470008, 1162.47470441, 206.185548437, 1052.26838319, 213.299095438,
  426.598190876, 1265.56747863, 846.082834751, 639.897286314, 1066.49547719, 625.670192312,
  515.463871093, 838.96928775, 1581.95934828, 412.371096874, 742.990060533, 1368.66025285,
  1478.86657406, 323.505416657, 110.206321219, 2118.76386038, 533.623118358, 728.762966531,
  309.278322656, 454.909366527, 1155.36115741, 1685.0521225, 1898.35121794, 956.289155971,
  1692.1656695, 909.818733055, 543.918059096, 525.758811831, 1375.77379985};

  double R0 = 0.0;
  for(int i = 0; i < 52; ++i){
    R0 += R_0_A[i] * cos(R_0_B[i] + R_0_C[i] * astroTime->julianCentury);
  }

  const double R_1_A[43] = {1271801.52, 61661.816, 53443.713, 31185.171, 41390.269,
  11847.263, 9166.454, 3175.595, 3203.481, 3403.577, 2599.925, 2412.127, 2806.07,
  2676.611, 2100.392, 1646.16, 1641.093, 1049.766, 1024.703, 740.834, 806.43,
  676.729, 468.918, 444.628, 567.074, 415.84, 484.81, 337.576, 401.711, 347.33,
  260.727, 220.02, 203.233, 246.438, 183.575, 197.119, 179.982, 195.844, 200.14,
  170.248, 146.328, 133.441, 132.03};
  const double R_1_B[43] = {2.64937512894, 3.00076460387, 3.89717383175, 4.88276958012,
  0.0, 2.41328764459, 4.75978553741, 2.79298354393, 5.21084121495, 3.34689633223,
  3.63439058628, 1.46948314626, 3.74227009702, 4.33051702874, 3.92772817188, 5.30947626153,
  4.41628521235, 3.16115576687, 2.55437897122, 2.17089042827, 2.67747285932, 6.2497969066,
  4.70985711091, 0.40306241278, 4.57671527249, 5.36847472493, 2.46907968946, 3.16751996354,
  4.60509281258, 4.68154619204, 5.34286862943, 4.84195212656, 5.60019394971, 3.92373109496,
  4.26454732757, 3.70582665656, 4.4021361484, 3.75886519686, 4.43930806722, 4.84663902529,
  6.12953407685, 1.32112984738, 4.5111176854};
  const double R_1_C[43] = {529.690965095, 1059.38193019, 522.577418094, 536.804512095,
  0.0, 419.484643875, 7.1135470008, 103.092774219, 735.876513532, 1589.07289528,
  206.185548437, 426.598190876, 515.463871093, 1052.26838319, 639.897286314, 1066.49547719,
  625.670192312, 213.299095438, 412.371096874, 1162.47470441, 632.783739313, 838.96928775,
  543.918059096, 323.505416657, 742.990060533, 728.762966531, 949.17560897, 956.289155971,
  309.278322656, 14.2270940016, 846.082834751, 1368.66025285, 1155.36115741, 942.062061969,
  95.9792272178, 2118.76386038, 532.872358832, 199.072001436, 1045.15483619, 526.509571357,
  533.623118358, 110.206321219, 525.758811831};

  double R1 = 0.0;
  for(int i = 0; i < 48; ++i){
    R1 += R_1_A[i] * cos(R_1_B[i] + R_1_C[i] * astroTime->julianCentury);
  }

  const double R_2_A[36] = {79644.957, 8251.645, 7029.94, 5314.031, 1861.184, 836.256,
  964.42, 406.408, 426.544, 377.334, 497.914, 339.124, 362.961, 342.139, 279.94,
  332.558, 229.775, 200.884, 199.66, 257.306, 138.577, 113.38, 85.848, 94.695,
  83.674, 75.194, 70.197, 80.209, 56.365, 61.758, 66.425, 50.128, 51.793, 39.925,
  44.584, 44.215};
  const double R_2_B[36] = {1.35865949884, 5.777744604, 3.27477392111, 1.83835031247,
  2.97686957956, 4.19892740368, 5.48029587251, 3.78248932836, 2.22743958182, 2.24232535935,
  3.14159265359, 6.12690872435, 5.36776401268, 6.09909325177, 4.26158071104, 0.00332561805,
  0.70510840437, 3.06805028347, 4.42869041267, 0.962674825, 2.93153004432, 0.78831018317,
  5.14257631438, 1.70378030966, 0.05892269245, 1.60633621497, 1.50916343132, 2.98293613006,
  0.95014515126, 6.10246926546, 5.47411271821, 2.72034786035, 5.58477632168, 5.94843040319,
  5.52437023269, 0.26965913924};
  const double R_2_C[36] = {529.690965095, 522.577418094, 536.804512095, 1059.38193019,
  7.1135470008, 419.484643875, 515.463871093, 1066.49547719, 639.897286314, 1589.07289528,
  0.0, 625.670192312, 206.185548437, 1052.26838319, 412.371096874, 426.598190876,
  735.876513532, 543.918059096, 103.092774219, 632.783739313, 14.2270940016, 728.762966531,
  323.505416657, 838.96928775, 309.278322656, 956.289155971, 213.299095438, 742.990060533,
  1162.47470441, 1045.15483619, 199.072001436, 532.872358832, 942.062061969, 95.9792272178,
  508.350324092, 526.509571357};

  double R2 = 0.0;
  for(int i = 0; i < 40; ++i){
    R2 += R_2_A[i] * cos(R_2_B[i] + R_2_C[i] * astroTime->julianCentury);
  }

  const double R_3_A[28] = {3519.277, 1073.281, 915.63, 341.654, 254.881, 221.477,
  69.02, 89.777, 57.885, 57.7, 51.213, 46.968, 42.744, 37.444, 33.816, 31.166,
  29.943, 33.558, 20.709, 14.47, 12.974, 11.596, 12.357, 15.065, 11.062, 10.576,
  9.798, 6.725};
  const double R_3_B[28] = {6.05800355513, 1.67319166156, 1.41326157617, 0.52294532787,
  1.19631092831, 0.95234304351, 2.26889455907, 3.14159265359, 1.41227055539, 0.52564805704,
  5.97994255422, 1.57861666908, 6.11814173992, 1.18048940249, 1.66573652907, 1.0446807262,
  4.63498871771, 0.8485387917, 2.50340319894, 0.96111460506, 1.50391478213, 3.55299164531,
  2.6079739865, 0.8796121409, 1.78854133467, 0.00265970762, 6.24533081819, 1.86312777034};
  const double R_3_C[28] = {529.690965095, 536.804512095, 522.577418094, 1059.38193019,
  7.1135470008, 515.463871093, 1066.49547719, 0.0, 543.918059096, 639.897286314,
  412.371096874, 625.670192312, 419.484643875, 14.2270940016, 1052.26838319, 1589.07289528,
  426.598190876, 206.185548437, 728.762966531, 508.350324092, 1045.15483619, 323.505416657,
  735.876513532, 199.072001436, 309.278322656, 956.289155971, 103.092774219, 302.164775655};

  double R3 = 0.0;
  for(int i = 0; i < 31; ++i){
    R3 += R_3_A[i] * cos(R_3_B[i] + R_3_C[i] * astroTime->julianCentury);
  }

  const double R_4_A[15] = {128.623, 113.458, 82.704, 37.897, 26.713, 17.808, 12.564,
  9.272, 8.141, 6.174, 6.92, 5.327, 2.895, 2.696, 2.435};
  const double R_4_B[15] = {0.08347608895, 4.2481893818, 3.29801136583, 2.7340266556,
  5.68996992467, 5.40366594364, 6.00543529469, 0.75619260404, 5.68230705037, 5.10190413726,
  1.42214334807, 3.33829390777, 3.38407751603, 4.18310762577, 2.96139551556};
  const double R_4_C[15] = {536.804512095, 529.690965095, 522.577418094, 515.463871093,
  7.1135470008, 1059.38193019, 543.918059096, 1066.49547719, 14.2270940016, 639.897286314,
  412.371096874, 625.670192312, 1052.26838319, 728.762966531, 426.598190876};

  double R4 = 0.0;
  for(int i = 0; i < 16; ++i){
    R4 += R_4_A[i] * cos(R_4_B[i] + R_4_C[i] * astroTime->julianCentury);
  }

  const double R_5_A[7] = {11.193, 4.288, 2.004, 2.118, 1.908, 1.534, 1.596};
  const double R_5_B[7] = {4.74280611863, 5.90497787277, 3.65178377123, 5.57290745004,
  4.29659647286, 5.4637372964, 4.11045079899};
  const double R_5_C[7] = {536.804512095, 522.577418094, 7.1135470008, 515.463871093,
  543.918059096, 1066.49547719, 1059.38193019};

  double R5 = 0.0;
  for(int i = 0; i < 7; ++i){
    R5 += R_5_A[i] * cos(R_5_B[i] + R_5_C[i] * astroTime->julianCentury);
  }

  double julianCenturyMultiple = 1.0;
  double RValues[5] = {R0, R1, R2, R3, R4};
  radiusVector = 0.0;
  for(int i = 0; i < 5; ++i){
    radiusVector += RValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  radiusVector = radiusVector / 1.0e-8;
}

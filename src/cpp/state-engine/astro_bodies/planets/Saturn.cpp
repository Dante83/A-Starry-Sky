#include "../../world_state/AstroTime.h"
#include "../../Constants.h"
#include "../OtherPlanet.h"
#include "Earth.h"
#include "Saturn.h"
#include <cmath>

//
//Constructor
//
Saturn::Saturn(AstroTime* astroTimeRef) : OtherPlanet(astroTimeRef){
  //
  //Default constructor
  //
};

//From page 286 of Meeus
void Saturn::updateMagnitudeOfPlanet(){
  //We ignore the abberation effects when calculating this value
  double i = check4GreaterThan360(28.075216 - 0.012998 * astroTime->julianCentury + 0.000004 * astroTime->julianCentury * astroTime->julianCentury) * DEG_2_RAD;
  double omega = check4GreaterThan360(169.508470 + 1.394681 * astroTime->julianCentury + 0.000412 * astroTime->julianCentury * astroTime->julianCentury) * DEG_2_RAD;
  double x = heliocentric_x - earth->heliocentric_x;
  double y = heliocentric_y - earth->heliocentric_y;
  double z = heliocentric_z - earth->heliocentric_z;
  double lambda = atan2(y, x);
  double sin_lambda_minus_omega = sin(lambda - omega);
  double beta = atan2(z, sqrt(x * x + y * y));
  double sin_i = sin(i);
  double cos_i = cos(i);
  double sin_beta = sin(beta);
  double cos_beta = cos(beta);
  double sinB = sin_i * cos_beta * sin_lambda_minus_omega - cos_i * sin_beta;
  double cos_eclipticalLatitude = cos(eclipticalLatitude);
  double u1 = atan2(sin_i * sin(eclipticalLatitude) + cos_i * cos_eclipticalLatitude * sin(eclipticalLongitude - omega), (cos_eclipticalLatitude * cos(eclipticalLongitude - omega)));
  double u2 = atan2(sin_i * sin_beta + cos_i * cos_beta * sin_lambda_minus_omega, (cos_beta * cos(lambda - omega)));
  double deltaU = abs(u1 - u2);
  irradianceFromEarth = -8.88 + 5.0 * log(distanceFromSun * distanceFromEarth) + 0.44 * abs(deltaU) - 2.60 * abs(sinB) + 1.25 * sinB * sinB;
}

void Saturn::updateEclipticalLongitude(){
  const double L_0_A[90] = {87401354.0, 11107660.0, 1414151.0, 398379.0, 350769.0,
    206816.0, 76271.0, 23990.0, 16574.0, 15820.0, 15054.0, 14907.0, 14610.0,
    13160.0, 13005.0, 10725.0, 6126.0, 5863.0, 5228.0, 5020.0, 4593.0, 4006.0,
    3874.0, 3269.0, 2954.0, 2461.0, 1758.0, 16401581.0, 1391.0, 1124.0, 1087.0,
    1017.0, 957.0, 853.0, 849.0, 789.0, 749.0, 744.0, 687.0, 654.0, 634.0, 625.0,
    580.0, 546.0, 543.0, 530.0, 478.0, 474.0, 452.0, 449.0, 372.0, 355.0, 347.0,
    343.0, 330.0, 322.0, 322.0, 309.0, 287.0, 278.0, 249.0, 227.0, 220.0, 209.0,
    208.0, 208.0, 204.0, 185.0, 184.0, 182.0, 174.0, 165.0, 149.0, 148.0, 146.0,
    140.0, 131.0, 125.0, 122.0, 118.0, 117.0, 114.0, 112.0, 110.0, 109.0, 107.0,
    104.0, 103.0, 101.0};
  const double L_0_B[90] = {0.0, 3.9620509, 4.5858152, 0.52112, 3.303299, 0.246584,
    3.84007, 4.66977, 0.43719, 0.93809, 2.7167, 5.76903, 1.56519, 4.44891, 5.98119,
    3.1294, 1.7633, 0.2366, 4.2078, 3.1779, 0.6198, 2.2448, 3.2228, 0.7749, 0.9828,
    2.0316, 3.2658, 5.505, 4.3727, 4.0233, 2.8373, 4.1834, 3.717, 0.507, 3.421,
    3.191, 5.007, 2.144, 5.253, 1.747, 1.599, 2.299, 0.97, 3.093, 2.127, 1.518,
    4.449, 2.965, 5.475, 1.044, 1.29, 2.278, 3.013, 1.539, 0.246, 0.247, 0.961,
    2.572, 3.495, 2.37, 0.4, 1.47, 4.91, 4.204, 1.345, 0.483, 1.283, 6.011, 3.503,
    0.973, 5.491, 1.863, 0.44, 5.736, 1.535, 6.231, 4.295, 4.068, 6.277, 1.976,
    5.341, 2.679, 5.594, 1.105, 0.166, 3.438, 4.012, 2.192, 1.197, 4.965};
  const double L_0_C[90] = {0.0, 213.29909544, 7.113547, 206.185548, 426.598191,
    103.09274, 220.41264, 110.20632, 419.48464, 632.78374, 639.89729, 316.39187,
    3.93215, 14.22709, 11.0457, 202.2534, 277.035, 529.691, 3.1814, 433.7117,
    199.072, 63.7359, 138.5175, 949.1756, 95.9792, 735.8765, 522.5774, 846.0828,
    309.2783, 323.5054, 415.5525, 2.4477, 227.5262, 1265.567, 175.166, 209.367,
    0.963, 853.196, 224.345, 1052.268, 0.048, 412.371, 210.118, 74.782, 350.332,
    9.561, 117.32, 137.033, 742.99, 490.334, 127.472, 217.231, 838.969, 340.771,
    0.521, 1581.959, 203.738, 647.011, 216.48, 351.817, 211.815, 1368.66, 12.53,
    200.769, 625.67, 1162.475, 39.357, 265.989, 149.563, 4.193, 2.921, 0.751,
    5.417, 52.69, 5.629, 195.14, 21.341, 10.295, 1898.351, 4.666, 554.07, 1155.361,
    1059.382, 191.208, 1.484, 536.805, 956.289, 88.866, 1685.052, 269.921};

  double L0 = 0.0;
  for(int i = 0; i < 90; ++i){
    L0 += L_0_A[i] * cos(L_0_B[i] + L_0_C[i] * astroTime->julianMilliennia);
  }

  const double L_1_A[79] = {21354295596.0, 1296855.0, 564348.0, 107679.0, 98323.0,
    40255.0, 19942.0, 10512.0, 6939.0, 4803.0, 4056.0, 3769.0, 3385.0, 3302.0,
    3071.0, 1953.0, 1249.0, 922.0, 706.0, 650.0, 628.0, 487.0, 479.0, 468.0, 417.0,
    408.0, 352.0, 344.0, 340.0, 336.0, 332.0, 289.0, 281.0, 266.0, 230.0, 192.0,
    173.0, 167.0, 136.0, 131128.0, 109.0, 98.0, 94.0, 92.0, 87.0, 83.0, 78.0,
    67.0, 66.0, 62.0, 62.0, 58.0, 57.0, 55.0, 54.0, 51.0, 47.0, 47.0, 46.0, 44.0,
    40.0, 40.0, 38.0, 38.0, 37.0, 35.0, 34.0, 33.0, 33.0, 33.0, 32.0, 31.0, 30.0,
    30.0, 30.0, 29.0, 28.0, 26.0};
  const double L_1_B[79] = {0.0, 1.8282054, 2.885001, 2.277699, 1.0807, 2.04128,
    1.27955, 2.7488, 0.4049, 2.4419, 2.9217, 3.6497, 2.4169, 1.2626, 2.3274,
    3.5639, 2.628, 1.961, 4.417, 6.174, 6.111, 6.04, 4.988, 4.617, 2.117, 1.299,
    2.317, 3.959, 3.634, 3.772, 2.861, 2.733, 5.744, 0.543, 1.644, 2.965, 4.077,
    2.597, 2.286, 3.441, 4.095, 6.161, 4.73, 3.48, 3.95, 1.22, 3.11, 6.24, 0.29,
    5.65, 4.29, 1.83, 2.48, 5.02, 0.28, 5.15, 1.46, 1.18, 5.15, 2.23, 2.71, 0.41,
    3.89, 0.65, 2.53, 3.78, 6.08, 3.21, 4.64, 5.43, 0.3, 4.39, 2.43, 2.84, 6.19,
    3.39, 2.03, 2.74, 4.51};
  const double L_1_C[79] = {0.0, 213.2990954, 7.113547, 206.185548, 426.59819,
    220.41264, 103.09277, 14.22709, 639.8973, 419.4846, 110.2063, 3.9322, 3.1814,
    433.7117, 199.072, 11.0457, 95.9792, 227.526, 529.691, 202.253, 309.278,
    853.196, 522.577, 63.736, 323.505, 209.367, 632.784, 412.371, 316.392,
    735.877, 210.118, 117.32, 2.448, 647.011, 216.48, 224.345, 846.083, 21.341,
    10.295, 742.99, 217.231, 415.552, 838.97, 1052.27, 88.87, 440.83, 625.67,
    302.16, 4.67, 9.56, 127.47, 195.14, 191.96, 137.03, 74.78, 490.33, 536.8,
    149.56, 515.46, 956.29, 5.42, 269.92, 728.76, 422.67, 12.53, 2.92, 5.63,
    1368.66, 277.03, 1066.5, 351.82, 1155.36, 52.69, 203.0, 284.15, 1059.38,
    330.62, 265.99, 340.77};

  double L1 = 0.0;
  for(int i = 0; i < 79; ++i){
    L1 += L_1_A[i] * cos(L_1_B[i] + L_1_C[i] * astroTime->julianMilliennia);
  }

  const double L_2_A[63] = {116441.0, 91921.0, 90592.0, 15277.0, 10631.0, 10605.0,
    4265.0, 1216.0, 1165.0, 1082.0, 1045.0, 1020.0, 634.0, 549.0, 457.0, 425.0, 274.0,
    162.0, 129.0, 117.0, 105.0, 101.0, 96.0, 95.0, 85.0, 83.0, 82.0, 75.0, 67.0,
    66.0, 64.0, 61.0, 53.0, 46.0, 45.0, 42.0, 32.0, 32.0, 31.0, 27.0, 25.0, 20.0,
    18.0, 17.0, 16.0, 14.0, 14.0, 12.0, 12.0, 12.0, 11.0, 11.0, 11.0, 10.0, 10.0,
    10.0, 9.0, 8.0, 8.0, 8.0, 7.0, 6.0, 6.0};
  const double L_2_B[63] = {1.179879, 0.07425, 0.0, 4.06492, 0.25778, 5.40964,
    1.046, 2.9186, 4.6094, 5.6913, 4.021, 0.6337, 4.388, 5.573, 1.268, 0.209,
    4.288, 1.381, 1.566, 3.881, 4.9, 0.893, 2.91, 5.63, 5.73, 6.05, 1.02, 4.76,
    0.46, 0.48, 0.35, 4.88, 2.75, 5.69, 1.67, 5.71, 0.07, 1.67, 4.16, 0.83, 5.66,
    5.94, 4.9, 1.63, 0.58, 0.21, 3.76, 4.72, 0.13, 3.12, 5.92, 5.6, 3.2, 4.99, 0.26,
    4.15, 0.46, 2.14, 5.25, 4.03, 5.4, 4.46, 5.93};
  const double L_2_C[63] = {7.113547, 213.2991, 0.0, 206.18555, 220.41264, 426.59819,
    14.2271, 103.0928, 639.8973, 433.7117, 199.072, 3.1814, 419.485, 3.932, 110.206,
    227.526, 95.979, 11.046, 309.278, 853.196, 647.011, 21.341, 316.39, 412.37,
    209.37, 216.48, 117.32, 210.12, 522.28, 10.29, 323.51, 632.78, 529.69, 440.83,
    202.25, 88.87, 63.74, 302.16, 191.96, 224.34, 735.88, 217.23, 625.67, 742.99,
    515.46, 838.97, 195.14, 203.0, 234.64, 846.08, 536.8, 728.76, 1066.5, 422.67,
    330.62, 860.31, 956.29, 269.92, 429.78, 9.56, 1052.27, 284.15, 405.26};

  double L2 = 0.0;
  for(int i = 0; i < 63; ++i){
    L2 += L_2_A[i] * cos(L_2_B[i] + L_2_C[i] * astroTime->julianMilliennia);
  }

  const double L_3_A[48] = {16039.0, 4250.0, 1907.0, 1466.0, 1162.0, 1067.0, 239.0,
    237.0, 166.0, 151.0, 131.0, 63.0, 62.0, 40.0, 40.0, 39.0, 28.0, 25.0, 19.0,
    18.0, 18.0, 18.0, 18.0, 16.0, 16.0, 13.0, 11.0, 11.0, 10.0, 9.0, 8.0, 7.0,
    6.0, 6.0, 5.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0};
  const double L_3_B[48] = {5.73945, 4.5854, 4.7608, 5.9133, 5.6197, 3.6082,
    3.861, 5.768, 5.116, 2.736, 4.743, 0.23, 4.74, 5.47, 5.96, 5.83, 3.01, 0.99,
    1.92, 4.97, 1.03, 4.2, 3.32, 3.9, 5.62, 1.18, 5.58, 5.93, 3.95, 3.39, 4.88,
    0.38, 2.25, 1.06, 4.64, 3.14, 2.31, 2.2, 0.59, 4.93, 0.42, 4.77, 3.35, 3.2,
    1.19, 1.35, 4.16, 3.07};
  const double L_3_C[48] = {7.11355, 213.2991, 220.4126, 206.1855, 14.2271,
    426.5982, 433.712, 199.072, 3.181, 639.897, 227.526, 419.48, 103.09, 21.34,
    95.98, 110.21, 647.01, 3.93, 853.2, 10.29, 412.37, 216.48, 309.28, 440.83,
    117.32, 88.87, 11.05, 191.96, 209.37, 302.16, 323.51, 632.78, 522.58, 210.12,
    234.64, 0.0, 515.46, 860.31, 529.69, 224.34, 625.67, 330.62, 429.78, 202.25,
    1066.5, 405.26, 223.59, 654.12};

  double L3 = 0.0;
  for(int i = 0; i < 48; ++i){
    L3 += L_3_A[i] * cos(L_3_B[i] + L_3_C[i] * astroTime->julianMilliennia);
  }

  const double L_4_A[27] = {1662.0, 257.0, 236.0, 149.0, 114.0, 110.0, 68.0, 40.0,
    38.0, 31.0, 15.0, 9.0, 6.0, 6.0, 4.0, 4.0, 3.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.0,
    2.0, 2.0, 2.0, 1.0};
  const double L_4_B[27] = {3.9983, 2.984, 3.902, 2.741, 3.142, 1.515, 1.72, 2.05,
    1.24, 3.01, 0.83, 3.71, 2.42, 1.16, 1.45, 2.12, 4.09, 2.77, 3.01, 0.0, 0.39,
    3.78, 2.83, 5.08, 2.24, 5.19, 1.55};
  const double L_4_C[27] = {7.1135, 220.413, 14.227, 213.299, 0.0, 206.186, 426.6,
    433.71, 199.07, 227.53, 639.9, 21.34, 419.48, 647.01, 95.98, 440.83, 110.21,
    412.37, 88.87, 853.2, 103.09, 117.32, 234.64, 309.28, 216.48, 302.16, 191.96};

  double L4 = 0.0;
  for(int i = 0; i < 27; ++i){
    L4 += L_4_A[i] * cos(L_4_B[i] + L_4_C[i] * astroTime->julianMilliennia);
  }

  const double L_5_A[12] = {124.0, 34.0, 28.0, 6.0, 5.0, 4.0, 3.0, 3.0, 2.0, 1.0, 1.0, 1.0};
  const double L_5_B[12] = {2.259, 2.16, 1.2, 1.22, 0.24, 6.23, 2.97, 4.29, 6.25, 5.28, 0.24, 3.14};
  const double L_5_C[12] = {7.114, 14.23, 220.41, 227.53, 433.71, 426.6, 199.07, 206.19, 213.3, 639.9, 440.83, 0.0};

  double L5 = 0.0;
  for(int i = 0; i < 12; ++i){
    L5 += L_5_A[i] * cos(L_5_B[i] + L_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double LValues[6] = {L0, L1, L2, L3, L4, L5};
  eclipticalLongitude = 0.0;
  for(int i = 0; i < 6; ++i){
    eclipticalLongitude += LValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLongitude *= 1.0e-8;
  eclipticalLongitude = fmod(eclipticalLongitude, PI_TIMES_TWO);
  eclipticalLongitude = eclipticalLongitude < 0 ?  PI_TIMES_TWO + eclipticalLongitude : eclipticalLongitude;
}

void Saturn::updateEclipticalLatitude(){
  const double B_0_A[34] = {4330678.0, 240348.0, 84746.0, 34116.0, 30863.0, 14734.0,
    9917.0, 6994.0, 4808.0, 4788.0, 3432.0, 1506.0, 1060.0, 969.0, 942.0, 708.0,
    552.0, 400.0, 319.0, 316.0, 314.0, 284.0, 236.0, 215.0, 209.0, 207.0, 179.0,
    141.0, 139.0, 139.0, 135.0, 122.0, 116.0, 114.0};
  const double B_0_B[34] = {3.6028443, 2.852385, 0.0, 0.57297, 3.48442, 2.11847,
    5.79, 4.736, 5.4331, 4.9651, 2.7326, 6.013, 5.631, 5.204, 1.396, 3.803, 5.131,
    3.359, 3.626, 1.997, 0.465, 4.886, 2.139, 5.95, 2.12, 0.73, 2.954, 0.644,
    4.595, 1.998, 5.245, 3.115, 3.109, 0.963};
  const double B_0_C[34] = {213.2290954, 426.598191, 0.0, 206.18555, 220.41264,
    639.89729, 419.4846, 7.1135, 316.3919, 110.2063, 433.7117, 103.0928, 529.691,
    632.784, 853.196, 323.505, 202.253, 227.526, 209.367, 647.011, 217.231, 224.345,
    11.046, 846.083, 415.552, 199.072, 63.736, 490.334, 14.227, 735.877, 742.99,
    522.577, 216.48, 210.118};

  double B0 = 0.0;
  for(int i = 0; i < 34; ++i){
    B0 += B_0_A[i] * cos(B_0_B[i] + B_0_C[i] * astroTime->julianMilliennia);
  }

  const double B_1_A[32] = {397555.0, 49479.0, 8572.0, 14801.0, 9644.0, 3757.0,
    2717.0, 1455.0, 1291.0, 853.0, 298.0, 292.0, 284.0, 275.0, 172.0, 166.0,
    158.0, 128.0, 110.0, 82.0, 81.0, 69.0, 65.0, 61.0, 59.0, 46.0, 36.0, 34.0,
    33.0, 32.0, 27.0, 27.0};
  const double B_1_B[32] = {5.3329, 3.14159, 6.09919, 2.30586, 1.6967, 1.2543,
    5.9117, 0.8516, 2.9177, 0.436, 0.919, 5.316, 1.619, 3.889, 0.052, 2.444,
    5.209, 1.207, 2.457, 2.76, 2.86, 1.66, 1.26, 1.25, 1.82, 0.82, 1.82, 2.84,
    1.31, 1.19, 4.65, 4.44};
  const double B_1_C[32] = {213.299095, 0.0, 426.59819, 206.18555, 220.4126,
    419.4846, 639.8973, 433.7117, 7.1135, 316.392, 632.784, 853.196, 227.526,
    103.093, 647.011, 199.072, 110.206, 529.691, 217.231, 210.12, 14.23, 202.25,
    216.48, 209.37, 323.51, 440.83, 224.34, 117.32, 412.37, 846.08, 1066.5, 11.05};

  double B1 = 0.0;
  for(int i = 0; i < 32; ++i){
    B1 += B_1_A[i] * cos(B_1_B[i] + B_1_C[i] * astroTime->julianMilliennia);
  }

  const double B_2_A[29] = {20630.0, 3720.0, 1627.0, 1346.0, 706.0, 365.0, 330.0,
    219.0, 139.0, 104.0, 93.0, 71.0, 52.0, 49.0, 41.0, 29.0, 24.0, 21.0, 20.0,
    18.0, 17.0, 16.0, 14.0, 12.0, 8.0, 7.0, 7.0, 6.0, 6.0};
  const double B_2_B[29] = {0.50482, 3.9983, 6.1819, 0.0, 3.039, 5.099, 5.279,
    3.828, 1.043, 6.157, 1.98, 4.15, 2.88, 4.43, 3.16, 4.53, 1.12, 4.35, 5.31,
    0.85, 5.68, 4.26, 3.0, 2.53, 3.32, 5.56, 0.29, 1.16, 3.61};
  const double B_2_C[29] = {213.2991, 206.1855, 220.4126, 0.0, 419.485, 426.598,
    433.712, 639.897, 7.114, 227.526, 316.39, 199.07, 632.78, 647.01, 853.2, 210.12,
    14.23, 217.23, 440.83, 110.21, 216.48, 103.09, 412.37, 529.69, 202.25, 209.37,
    323.51, 117.32, 860.31};

  double B2 = 0.0;
  for(int i = 0; i < 29; ++i){
    B2 += B_2_A[i] * cos(B_2_B[i] + B_2_C[i] * astroTime->julianMilliennia);
  }

  const double B_3_A[21] = {666.0, 632.0, 398.0, 188.0, 92.0, 52.0, 42.0, 26.0,
    21.0, 18.0, 11.0, 10.0, 7.0, 6.0, 6.0, 6.0, 5.0, 5.0, 4.0, 3.0, 2.0};
  const double B_3_B[21] = {1.99, 5.698, 0.0, 4.338, 4.84, 3.42, 2.38, 4.4, 5.85,
    1.99, 5.37, 2.55, 3.46, 4.8, 0.02, 3.52, 5.64, 1.22, 4.71, 0.63, 3.72};
  const double B_3_C[21] = {213.299, 206.186, 0.0, 220.413, 419.48, 433.71, 426.6,
    227.53, 199.07, 639.9, 7.11, 647.01, 316.39, 632.78, 210.12, 440.83, 14.23,
    853.2, 412.37, 103.09, 216.48};

  double B3 = 0.0;
  for(int i = 0; i < 21; ++i){
    B3 += B_3_A[i] * cos(B_3_B[i] + B_3_C[i] * astroTime->julianMilliennia);
  }

  const double B_4_A[12] = {80.0, 32.0, 17.0, 12.0, 9.0, 6.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0};
  const double B_4_B[12] = {1.12, 3.12, 2.48, 3.14, 0.38, 1.56, 2.63, 1.28, 1.43, 0.67, 1.72, 6.18};
  const double B_4_C[12] = {206.19, 213.30, 220.41, 0.0, 419.48, 433.71, 227.53, 199.07, 426.6, 647.01, 440.83, 639.9};

  double B4 = 0.0;
  for(int i = 0; i < 12; ++i){
    B4 += B_4_A[i] * cos(B_4_B[i] + B_4_C[i] * astroTime->julianMilliennia);
  }

  const double B_5_A[2] = {8.0, 1.0};
  const double B_5_B[2] = {2.82, 0.51};
  const double B_5_C[2] = {206.19, 220.41};

  double B5 = 0.0;
  for(int i = 0; i < 2; ++i){
    B5 += B_5_A[i] * cos(B_5_B[i] + B_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double BValues[6] = {B0, B1, B2, B3, B4, B5};
  eclipticalLatitude = 0.0;
  for(int i = 0; i < 6; ++i){
    eclipticalLatitude += BValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLatitude *= 1.0e-8;
}

void Saturn::updateRadiusVector(){
  const double R_0_A[44] = {955758136.0, 52921382.0, 1873680.0, 1464664.0, 821891.0,
    547507.0, 371684.0, 361778.0, 140618.0, 108975.0, 69007.0, 61053.0, 48913.0,
    34144.0, 32402.0, 20937.0, 20839.0, 20747.0, 15298.0, 14296.0, 12884.0, 11993.0,
    11380.0, 9796.0, 7753.0, 6771.0, 6466.0, 5850.0, 5307.0, 4696.0, 4044.0, 3688.0,
    3461.0, 3420.0, 3401.0, 3376.0, 2976.0, 2885.0, 2881.0, 2508.0, 2448.0, 2406.0,
    2174.0, 2024};
  const double R_0_B[44] = {0.0, 2.3922622, 5.2354961, 1.6476305, 5.9352, 5.015326,
    2.271148, 3.139043, 5.704067, 3.293136, 5.941, 0.94038, 1.55733, 0.19519,
    5.47085, 0.46349, 1.52103, 5.33256, 3.05944, 2.60434, 1.64892, 5.98051, 1.73106,
    5.2048, 5.8519, 3.0043, 0.1773, 1.4552, 0.5974, 2.1492, 1.6401, 0.7802, 1.8509,
    4.9455, 0.5539, 3.6953, 5.6847, 1.3876, 0.1796, 3.5385, 6.1841, 2.9656, 0.0151,
    5.0541};
  const double R_0_C[44] = {0.0, 213.29909544, 206.1855484, 426.5981909, 316.39187,
    103.092774, 220.412642, 7.113547, 632.783739, 110.206321, 419.48464, 639.89729,
    202.2534, 277.03499, 949.17561, 735.87651, 433.71174, 199.072, 529.69097,
    323.50542, 138.5175, 846.08283, 522.57742, 1265.5675, 95.9792, 14.2271,
    1052.2684, 415.5525, 63.7359, 227.5262, 209.3669, 412.3711, 175.1661, 1581.9593,
    350.3321, 224.3448, 210.1177, 838.9693, 853.1964, 742.9901, 1368.6603, 117.3199,
    340.7709, 11.0457};

  double R0 = 0.0;
  for(int i = 0; i < 44; ++i){
    R0 += R_0_A[i] * cos(R_0_B[i] + R_0_C[i] * astroTime->julianMilliennia);
  }

  const double R_1_A[38] = {6182981.0, 506578.0, 341394.0, 188491.0, 186262.0,
    143891.0, 49621.0, 20928.0, 19953.0, 18840.0, 13877.0, 12893.0, 5397.0, 4869.0,
    4247.0, 3252.0, 3081.0, 2909.0, 2856.0, 1988.0, 1941.0, 1581.0, 1340.0, 1316.0,
    1203.0, 1091.0, 966.0, 954.0, 898.0, 882.0, 874.0, 785.0, 740.0, 658.0, 650.0,
    613.0, 599.0, 503.0};
  const double R_1_B[38] = {0.2584352, 0.711147, 5.796358, 0.472157, 3.141593,
    1.407449, 6.01744, 5.09246, 1.1756, 1.6082, 0.75886, 5.9433, 1.2885, 0.8679,
    0.393, 1.2585, 3.4366, 4.6068, 2.1673, 2.4505, 6.0239, 4.308, 1.253, 1.8665,
    0.0753, 0.48, 5.152, 0.983, 1.885, 1.402, 3.064, 1.382, 4.144, 1.725, 3.033,
    2.549, 2.13};
  const double R_1_C[38] = {213.2990954, 206185548, 426.598191, 220.412642, 0.0,
    7.113547, 103.09277, 639.89729, 419.48464, 110.20632, 199.072, 433.71174,
    14.2271, 323.5054, 227.5262, 95.9792, 522.5774, 202.2534, 735.8765, 412.3711,
    209.3669, 210.1177, 853.1964, 117.3199, 316.3919, 216.4805, 632.784, 647.011,
    529.691, 1052.268, 224.345, 838.969, 625.67, 309.278, 742.990, 63.736, 217.231, 3.932};

  double R1 = 0.0;
  for(int i = 0; i < 38; ++i){
    R1 += R_1_A[i] * cos(R_1_B[i] + R_1_C[i] * astroTime->julianMilliennia);
  }

  const double R_2_A[32] = {436902.0, 71923.0, 49767.0, 43221.0, 29646.0, 4721.0,
    4142.0, 3789.0, 2964.0, 2556.0, 2327.0, 2208.0, 2188.0, 1957.0, 924.0, 706.0,
    546.0, 431.0, 405.0, 391.0, 374.0, 361.0, 356.0, 326.0, 207.0, 204.0, 180.0,
    178.0, 154.0, 148.0, 133.0, 132.0};
  const double R_2_B[32] = {4.786717, 2.5007, 4.97168, 3.8694, 5.9631, 2.4753,
    4.1067, 3.0977, 1.3721, 2.8507, 0.0, 6.2759, 5.8555, 4.9245, 5.464, 2.971, 4.129,
    5.178, 4.173, 4.481, 5.834, 3.277, 3.192, 2.269, 4.022, 0.088, 3.597, 4.097,
    3.135, 0.136, 2.594, 5.933};
  const double R_2_C[32] = {213.299095, 206.18555, 220.41264, 426.59819, 7.11355,
    199.0720, 433.7117, 639.8973, 103.0928, 419.4846, 0.0, 110.2063, 14.2271, 227.5262,
    323.505, 95.979, 412.371, 522.577, 209.367, 216.480, 117.32, 647.011, 210.118,
    853.196, 735.877, 202.253, 632.784, 440.825, 625.67, 302.165, 191.958, 309.278};

  double R2 = 0.0;
  for(int i = 0; i < 32; ++i){
    R2 += R_2_A[i] * cos(R_2_B[i] + R_2_C[i] * astroTime->julianMilliennia);
  }

  const double R_3_A[28] = {20315.0, 8924.0, 6909.0, 4087.0, 3879.0, 1071.0, 907.0,
    606.0, 597.0, 483.0, 393.0, 229.0, 188.0, 150.0, 121.0, 102.0, 101.0, 93.0,
    84.0, 73.0, 62.0, 55.0, 50.0, 45.0, 42.0, 40.0, 38.0, 32.0};
  const double R_3_B[28] = {3.02187, 3.1914, 4.3517, 4.2241, 2.0106, 4.2036, 2.283,
    3.175, 4.135, 1.173, 0.0, 4.698, 4.59, 3.202, 3.768, 4.71, 5.819, 1.44, 2.63,
    4.15, 2.31, 0.31, 2.39, 4.37, 0.69, 1.84, 5.94, 4.01};
  const double R_3_C[28] = {213.29910, 220.4126, 206.1855, 7.1135, 426.5982, 199.072,
    433.712, 227.526, 14.227, 639.897, 0.0, 419.485, 110.206, 103.093, 323.505,
    95.979, 412.371, 647.01, 216.48, 117.32, 440.83, 853.2, 209.37, 191.96, 522.58,
    302.16, 88.87, 21.34};

  double R3 = 0.0;
  for(int i = 0; i < 28; ++i){
    R3 += R_3_A[i] * cos(R_3_B[i] + R_3_C[i] * astroTime->julianMilliennia);
  }

  const double R_4_A[23] = {1202.0, 708.0, 516.0, 427.0, 268.0, 170.0, 150.0, 145.0,
    121.0, 47.0, 19.0, 17.0, 16.0, 15.0, 14.0, 13.0, 11.0, 11.0, 10.0, 9.0, 9.0, 9.0, 8.0};
  const double R_4_B[23] = {1.415, 1.162, 6.24, 2.469, 0.187, 5.959, 0.48, 1.442,
    2.405, 5.57, 5.86, 0.53, 2.9, 0.3, 1.3, 2.09, 0.22, 2.46, 3.14, 1.56, 2.228, 0.68, 1.27};
  const double R_4_C[23] = {220.4126, 213.299, 206.186, 7.114, 426.598, 199.072,
    433.712, 227.526, 14.227, 639.9, 647.01, 440.83, 110.21, 419.48, 412.37, 323.51,
    95.98, 117.32, 0.0, 88.87, 21.34, 216.48, 234.64};

  double R4 = 0.0;
  for(int i = 0; i < 23; ++i){
    R4 += R_4_A[i] * cos(R_4_B[i] + R_4_C[i] * astroTime->julianMilliennia);
  }

  const double R_5_A[18] = {129.0, 32.0, 27.0, 20.0, 20.0, 14.0, 14.0, 13.0, 7.0,
    5.0, 4.0, 3.0, 3.0, 3.0, 3.0, 2.0, 2.0, 2.0};
  const double R_5_B[18] = {5.913, 0.69, 5.91, 4.95, 0.67, 2.67, 1.46, 4.59, 4.63,
    3.61, 4.9, 4.07, 4.66, 0.49, 3.18, 3.7, 3.32, 0.56};
  const double R_5_C[18] = {220.413, 7.11, 227.53, 433.71, 14.23, 206.19, 199.07,
    426.6, 213.3, 639.9, 440.83, 647.01, 191.96, 323.51, 419.48, 88.87, 95.98, 117.32};

  double R5 = 0.0;
  for(int i = 0; i < 18; ++i){
    R5 += R_5_A[i] * cos(R_5_B[i] + R_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double RValues[6] = {R0, R1, R2, R3, R4, R5};
  radiusVector = 0.0;
  for(int i = 0; i < 6; ++i){
    radiusVector += RValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  radiusVector *= 1.0e-8;
}

#include "../../world_state/AstroTime.h"
#include "../../Constants.h"
#include "../OtherPlanet.h"
#include "Earth.h"
#include "Mars.h"
#include <cmath>

//
//Constructor
//
Mars::Mars(AstroTime* astroTimeRef) : OtherPlanet(astroTimeRef){
  //
  //Default constructor
  //
};

//From page 286 of Meeus
void Mars::updateMagnitudeOfPlanet(){
  double phaseAngle = getPhaseAngleInDegrees();
  irradianceFromEarth = -1.52 + 5.0 * log(distanceFromSun * distanceFromEarth) + 0.016 * phaseAngle;
}

void Mars::updateEclipticalLongitude(){
  const double L_0_A[69] = {620347712.0, 18656368.0, 1108217.0, 91798.0, 27745.0,
     12316.0, 10610.0, 8927.0, 8716.0, 7775.0, 6798.0, 4161.0, 3575.0, 3075.0,
     2938.0, 2628.0, 2580.0, 2389.0, 1799.0, 1546.0, 1528.0, 1286.0, 1264.0,
     1025.0, 892.0, 859.0, 833.0, 833.0, 749.0, 724.0, 713.0, 655.0, 636.0,
     553.0, 550.0, 472.0, 426.0, 415.0, 312.0, 307.0, 302.0, 299.0, 293.0, 284.0,
     281.0, 274.0, 274.0, 239.0, 236.0, 231.0, 221.0, 204.0, 193.0, 189.0, 179.0,
     174.0, 172.0, 160.0, 144.0, 140.0, 138.0, 131.0, 128.0, 128.0, 117.0, 113.0,
     110.0, 105.0, 100.0};
  const double L_0_B[69] = {0.0, 5.050371, 5.4009984, 5.75479, 5.9705, 0.8496,
    2.93959, 4.157, 6.1101, 3.3397, 0.3646, 0.2281, 1.6619, 0.857, 6.0789,
    0.6481, 0.03, 5.039, 0.6563, 2.9158, 1.1498, 3.068, 36228, 3.6933, 0.83,
    2.401, 4.495, 2.464, 3.822, 0.675, 3.663, 0.489, 2.922, 4.475, 3.81, 3.625,
    0.554, 0.497, 0.999, 0.381, 4.486, 2.783, 4.221, 5.769, 5.882, 0.542, 0.134,
    5.372, 5.755, 1.282, 3.505, 2.821, 3.357, 1.491, 1.006, 2.414, 0.439, 3.949,
    1.419, 3.326, 4.301, 4.045, 2.208, 1.807, 3.128, 3.701, 1.052, 0.785, 3.243};
  const double L_0_C[69] = {0.0, 3340.61242670, 6681.2248534, 10021.83728, 3.52312,
    2810.92146, 2281.23050, 0.0173, 13362.4497, 5621.8429, 398.149, 2942.4634,
    2544.3144, 191.4483, 0.0673, 3337.0893, 3344.1355, 796.298, 529.691, 1751.5395,
    6151.5339, 2146.1654, 5092.152, 8962.4553, 16703.062, 2914.014, 3340.630,
    3340.595, 155.42, 3738.761, 1059.383, 3127.313, 8432.764, 1748.016, 0.98,
    1194.447, 6283.076, 213.299, 6677.702, 6684.748, 3532.061, 6254.627, 20.775,
    3149.164, 1349.867, 3340.545, 3340.680, 4136.91, 3333.499, 3870.303, 382.897,
    1221.849, 3.59, 9492.146, 951.718, 553.569, 5486.778, 4562.461, 135.065, 2700.715,
    7.114, 12303.068, 1592.596, 5088.629, 7903.073, 1589.073, 242.729, 8827.390, 11773.377};

  double L0 = 0.0;
  for(int i = 0; i < 69; ++i){
    L0 += L_0_A[i] * cos(L_0_B[i] + L_0_C[i] * astroTime->julianMilliennia);
  }

  const double L_1_A[46] = {334085627474.0, 1458227.0, 164901.0, 1963.0, 3452.0,
    2485.0, 842.0, 538.0, 521.0, 433.0, 430.0, 382.0, 314.0, 283.0, 206.0, 169.0,
    158.0, 134.0, 134.0, 118.0, 117.0, 114.0, 114.0, 91.0, 85.0, 83.0, 81.0, 80.0,
    73.0, 73.0, 71.0, 68.0, 65.0, 65.0, 62.0, 57.0, 48.0, 48.0, 47.0, 41.0, 40.0,
    40.0, 33.0, 28.0, 27.0, 27.0};
  const double L_1_B[46] = {0.0, 3.6042605, 3.926313, 4.26594, 4.7321, 4.6128,
    4.459, 5.016, 4.994, 2.561, 5.316, 3.539, 4.963, 3.16, 4.569, 1.329, 4.185,
    2.233, 5.97, 6.024, 2.213, 2.129, 5.428, 1.1, 3.91, 5.3, 4.43, 2.25, 2.50,
    5.84, 3.86, 5.02, 1.02, 3.05, 4.15, 3.89, 4.87, 1.18, 1.31, 0.71, 2.73, 5.32,
    5.41, 0.05, 3.89, 5.11};
  const double L_1_C[46] = {0.0, 3340.6124267, 6681.224853, 10021.83728, 3.5231,
    13362.4497, 2281.23, 398.149, 3344.13, 191.448, 155.42, 796.298, 16703.062,
    2544.314, 2146.165, 3337.089, 1751.54, 0.98, 1748.016, 6151.534, 1059.382,
    1194.447, 3738.761, 1349.87, 553.57, 6684.75, 529.69, 8962.46, 951.72, 242.73,
    2914.01, 382.9, 3340.6, 3340.63, 3149.16, 4136.91, 213.3, 3333.5, 3185.19, 1592.6,
    7.11, 20043.67, 6283.08, 9492.15, 1221.85, 2700.72};

  double L1 = 0.0;
  for(int i = 0; i < 46; ++i){
    L1 += L_1_A[i] * cos(L_1_B[i] + L_1_C[i] * astroTime->julianMilliennia);
  }

  const double L_2_A[33] = {58016.0, 54188.0, 13908.0, 2465.0, 389.0, 222.0, 121.0,
    62.0, 54.0, 34.0, 32.0, 30.0, 23.0, 22.0, 20.0, 16.0, 16.0, 16.0, 15.0, 14.0,
    14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 9.0, 9.0, 8.0, 7.0, 7.0, 6.0, 6.0};
  const double L_2_B[33] = {2.04979, 0.0, 2457.42, 2.8, 3.141, 3.194, 0.543, 3.49,
    3.54, 6.0, 4.14, 2.0, 4.33, 3.45, 5.42, 0.66, 6.11, 1.22, 6.1, 4.02, 2.62, 0.6,
    3.86, 4.72, 0.25, 0.68, 3.83, 3.88, 5.46, 2.58, 2.38, 5.48, 2.34};
  const double L_2_C[33] = {3340.61243, 0.0, 6681.22485, 10021.83773, 13362.45,
    3.523, 155.42, 16703.06, 3344.14, 2281.23, 191.45, 796.3, 242.73, 398.15,
    553.57, 0.98, 2146.17, 1748.02, 3185.19, 951.72, 1349.87, 1194.45, 6684.75,
    2544.31, 382.9, 1059.38, 20043.67, 3738.76, 1751.54, 3149.16, 4136.91, 1592.6, 3097.88};

  double L2 = 0.0;
  for(int i = 0; i < 33; ++i){
    L2 += L_2_A[i] * cos(L_2_B[i] + L_2_C[i] * astroTime->julianMilliennia);
  }

  const double L_3_A[12] = {1482.0, 662.0, 188.0, 41.0, 26.0, 23.0, 10.0, 8.0, 5.0, 4.0, 3.0, 3.0};
  const double L_3_B[12] = {0.4443, 0.885, 1.288, 1.65, 0.0, 2.05, 1.58, 2.0, 2.82, 2.02, 4.59, 0.65};
  const double L_3_C[12] = {3340.6124, 6681.225, 10021.837, 13362.45, 0.0, 155.42, 3.52, 16703.06, 242.73, 3344.14, 3185.19, 553.57};

  double L3 = 0.0;
  for(int i = 0; i < 12; ++i){
    L3 += L_3_A[i] * cos(L_3_B[i] + L_3_C[i] * astroTime->julianMilliennia);
  }

  const double L_4_A[8] = {114.0, 29.0, 24.0, 11.0, 3.0, 3.0, 1.0, 1.0};
  const double L_4_B[8] = {3.1416, 5.64, 5.14, 6.03, 0.13, 3.56, 0.49, 1.32};
  const double L_4_C[8] = {0.0, 6681.22, 3340.61, 10021.84, 13362.45, 155.42, 16703.06, 242.73};

  double L4 = 0.0;
  for(int i = 0; i < 8; ++i){
    L4 += L_4_A[i] * cos(L_4_B[i] + L_4_C[i] * astroTime->julianMilliennia);
  }

  const double L_5_A[2] = {1.0, 1.0};
  const double L_5_B[2] = {3.14, 4.04};
  const double L_5_C[2] = {0.0, 6681.22};

  double L5 = 0.0;
  for(int i = 0; i < 2; ++i){
    L5 += L_5_A[i] * cos(L_5_B[i] + L_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double LValues[6] = {L0, L1, L2, L3, L4, L5};
  eclipticalLongitude = 0.0;
  for(int i = 0; i < 6; ++i){
    eclipticalLongitude += LValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLongitude *= 1.0e-8;
  eclipticalLongitude = fmod(eclipticalLongitude, PI_TIMES_TWO);
  eclipticalLongitude = eclipticalLongitude < 0 ?  PI_TIMES_TWO + eclipticalLongitude : eclipticalLongitude;
}

void Mars::updateEclipticalLatitude(){
  const double B_0_A[16] = {3197135.0, 298033.0, 289105.0, 31366.0, 3484.0, 443.0,
    443.0, 39.0, 293.0, 182.0, 163.0, 160.0, 149.0, 143.0, 143.0, 139.0};
  const double B_0_B[16] = {3.7683204, 4.10617, 0.0, 4.44651, 4.7881, 5.026, 5.652,
    5.131, 3.793, 6.136, 4.264, 2.232, 2.165, 1.182, 3.213, 2.418};
  const double B_0_C[16] = {3340.612467, 6681.224853, 0.0, 10021.83728, 13362.4497,
    3344.136, 3337.089, 16703.062, 2281.230, 6151.534, 529.6691, 1059.382, 5621.843,
    3340.595, 3340.630, 8962.455};

  double B0 = 0.0;
  for(int i = 0; i < 16; ++i){
    B0 += B_0_A[i] * cos(B_0_B[i] + B_0_C[i] * astroTime->julianMilliennia);
  }

  const double B_1_A[9] = {350069.0, 14116.0, 9671.0, 1472.0, 426.0, 102.0, 79.0, 33.0, 26.0};
  const double B_1_B[9] = {5.368478, 3.14159, 5.4788, 3.2021, 3.408, 0.776, 3.72, 3.46, 2.48};
  const double B_1_C[9] = {3340.612427, 0.0, 6681.2249, 10021.8373, 13362.45, 3337.089, 16703.06, 5621.84, 2281.23};

  double B1 = 0.0;
  for(int i = 0; i < 9; ++i){
    B1 += B_1_A[i] * cos(B_1_B[i] + B_1_C[i] * astroTime->julianMilliennia);
  }

  const double B_2_A[7] = {16727.0, 4987.0, 302.0, 26.0, 21.0, 12.0, 8.0};
  const double B_2_B[7] = {0.60221, 3.1416, 5.559, 1.9, 0.92, 2.24, 2.25};
  const double B_2_C[7] = {3340.61243, 0.0, 6681.225, 13362.45, 10021.84, 3337.09, 16703.06};

  double B2 = 0.0;
  for(int i = 0; i < 7; ++i){
    B2 += B_2_A[i] * cos(B_2_B[i] + B_2_C[i] * astroTime->julianMilliennia);
  }

  const double B_3_A[4] = {607.0, 43.0, 14.0, 3.0};
  const double B_3_B[4] = {1.981, 0.0, 1.8, 3.45};
  const double B_3_C[4] = {3340.612, 0.0, 6681.22, 10021.84};

  double B3 = 0.0;
  for(int i = 0; i < 4; ++i){
    B3 += B_3_A[i] * cos(B_3_B[i] + B_3_C[i] * astroTime->julianMilliennia);
  }

  const double B_4_A[3] = {13.0, 11.0, 1.0};
  const double B_4_B[3] = {0.0, 3.46, 0.5};
  const double B_4_C[3] = {0.0, 3340.61, 6681.22};

  double B4 = 0.0;
  for(int i = 0; i < 3; ++i){
    B4 += B_4_A[i] * cos(B_4_B[i] + B_4_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double BValues[5] = {B0, B1, B2, B3, B4};
  eclipticalLatitude = 0.0;
  for(int i = 0; i < 5; ++i){
    eclipticalLatitude += BValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLatitude *= 1.0e-8;
}

void Mars::updateRadiusVector(){
  const double R_0_A[45] = {153033488.0, 14184953.0, 660776.0, 46179.0, 8110.0,
    7485.0, 5523.0, 3825.0, 2484.0, 2307.0, 1999.0, 1960.0, 1167.0, 1103.0, 992.0,
    899.0, 807.0, 798.0, 741.0, 726.0, 692.0, 633.0, 633.0, 630.0, 574.0, 526.0,
    473.0, 348.0, 284.0, 280.0, 276.0, 275.0, 270.0, 239.0, 234.0, 228.0, 223.0,
    219.0, 208.0, 208.0, 186.0, 183.0, 179.0, 176.0, 164.0};
  const double R_0_B[45] = {0.0, 3.47971284, 3.817834, 4.15595, 5.5596, 1.7724,
    1.3644, 4.4941, 4.9255, 0.0908, 5.3606, 4.7425, 2.1126, 5.0091, 5.839, 4.408,
    2.102, 3.448, 1.499, 1.245, 2.134, 0.894, 2.924, 1.287, 0.829, 5.383, 5.199,
    4.832, 2.907, 5.257, 1.218, 2.908, 3.764, 2.037, 5.105, 3.255, 4.199, 5.583,
    5.255, 4.846, 5.699, 5.081, 4.184, 5.953, 3.799};
  const double R_0_C[45] = {0.0, 3340.6124267, 6681.224853, 10021.83728,
    2810.9215, 5621.8429, 2281.2305, 13362.4497, 2942.4634, 2544.3144, 3337.0893,
    3344.1355, 5092.152, 398.149, 6151.534, 529.691, 1059.382, 796.298, 2146.165,
    8432.764, 8962.455, 3340.595, 3340.630, 1751.54, 2914.014, 3738.761, 3127.313,
    16703.062, 3532.061, 6283.076, 6254.627, 1748.016, 5884.927, 1194.447,
    5486.778, 6872.673, 3149.164, 191.448, 3340.545, 3340.680, 6677.702, 6684.748,
    3333.499, 3870.303, 4136.91};

  double R0 = 0.0;
  for(int i = 0; i < 45; ++i){
    R0 += R_0_A[i] * cos(R_0_B[i] + R_0_C[i] * astroTime->julianMilliennia);
  }

  const double R_1_A[27] = {1107433.0, 103176.0, 12877.0, 10816.0, 1195.0, 439.0,
    396.0, 183.0, 136.0, 128.0, 128.0, 127.0, 118.0, 88.0, 83.0, 76.0, 72.0, 67.0,
    66.0, 58.0, 54.0, 51.0, 49.0, 49.0, 48.0, 48.0, 39.0};
  const double R_1_B[27] = {2.0325052, 2.370718, 0.0, 2.70888, 3.047, 2.888, 3.423,
    1.584, 3.385, 6.043, 0.63, 1.954, 2.998, 3.42, 3.86, 4.45, 2.76, 2.55, 4.41,
    0.54, 0.68, 3.73, 5.73, 1.48, 2.58, 2.29, 2.32};
  const double R_1_C[27] = {3340.6124267, 6681.224853, 0.0, 10021.83728, 13362.4497,
    2281.230, 3344.136, 2544.314, 16703.062, 3337.089, 1059.382, 796.298, 2146.165,
    398.15, 3738.76, 6151.53, 529.69, 1751.54, 1748.02, 1194.45, 8962.46, 6684.75,
    3340.60, 3340.63, 3149.16, 2914.01, 4136.91};

  double R1 = 0.0;
  for(int i = 0; i < 27; ++i){
    R1 += R_1_A[i] * cos(R_1_B[i] + R_1_C[i] * astroTime->julianMilliennia);
  }

  const double R_2_A[11] = {44242.0, 8138.0, 1275.0, 187.0, 52.0, 41.0, 27.0, 18.0, 12.0, 10.0, 10.0};
  const double R_2_B[11] = {0.47931, 0.87, 1.2259, 1.573, 3.14, 1.97, 1.92, 4.43, 4.53, 5.39, 0.42};
  const double R_2_C[11] = {3340.61243, 6681.2249, 10021.8373, 13362.450, 0.0,
    3344.14, 16703.06, 2281.23, 3185.19, 1059.38, 796.30};

  double R2 = 0.0;
  for(int i = 0; i < 11; ++i){
    R2 += R_2_A[i] * cos(R_2_B[i] + R_2_C[i] * astroTime->julianMilliennia);
  }

  const double R_3_A[6] = {1113.0, 424.0, 100.0, 20.0, 5.0, 3.0};
  const double R_3_B[6] = {5.1499, 5.613, 5.997, 0.08, 3.14, 0.43};
  const double R_3_C[6] = {3340.6124, 6681.225, 10021.837, 13362.45, 0.0, 16703.06};

  double R3 = 0.0;
  for(int i = 0; i < 6; ++i){
    R3 += R_3_A[i] * cos(R_3_B[i] + R_3_C[i] * astroTime->julianMilliennia);
  }

  const double R_4_A[4] = {20.0, 16.0, 6.0, 2.0};
  const double R_4_B[4] = {3.58, 4.05, 4.46, 4.84};
  const double R_4_C[4] = {3340.61, 6681.22, 10021.84, 13362.45};

  double R4 = 0.0;
  for(int i = 0; i < 4; ++i){
    R4 += R_4_A[i] * cos(R_4_B[i] + R_4_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double RValues[5] = {R0, R1, R2, R3, R4};
  radiusVector = 0.0;
  for(int i = 0; i < 5; ++i){
    radiusVector += RValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  radiusVector *= 1.0e-8;
}

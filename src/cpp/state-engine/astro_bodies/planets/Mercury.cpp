#include "../../world_state/AstroTime.h"
#include "../../Constants.h"
#include "../OtherPlanet.h"
#include "Earth.h"
#include "Mercury.h"
#include <cmath>

//
//Constructor
//
Mercury::Mercury(AstroTime* astroTimeRef) : OtherPlanet(astroTimeRef){
  //
  //Default constructor
  //
};

//From page 286 of Meeus
void Mercury::updateMagnitudeOfPlanet(){
  double phaseAngle = getPhaseAngleInDegrees();
  double phaseAngleTerms = 0.0380 * phaseAngle - 0.000273 * phaseAngle * phaseAngle + 0.000002 * phaseAngle * phaseAngle * phaseAngle;
  irradianceFromEarth = -0.42 + 5.0 * log(distanceFromEarth * distanceFromSun) + phaseAngleTerms;
}

void Mercury::updateEclipticalLongitude(){
  const double L_0_A[38] = {440250710.144, 40989414.977, 5046294.2, 855346.844,
  165590.362, 34561.897, 7583.476, 3559.745, 1726.011, 1803.464, 1364.681, 1589.923,
  1017.332, 714.182, 643.759, 404.2, 352.442, 343.312, 339.215, 451.137, 325.329,
  259.588, 345.213, 272.948, 234.831, 238.793, 264.336, 216.645, 183.358, 175.965,
  181.629, 208.996, 172.642, 142.317, 137.943, 118.233, 96.86, 125.219};
  const double L_0_B[38] = {0.0, 1.48302034195, 4.47785489551, 1.16520322459, 4.11969163423,
  0.77930768443, 3.71348404924, 1.51202675145, 0.35832267096, 4.10333184211, 4.59918328256,
  2.9951042356, 0.88031393824, 1.54144862493, 5.30266166599, 3.28228953196, 5.24156372447,
  5.7653170387, 5.86327825226, 6.04989282259, 1.33674488758, 0.98732774234, 2.79211954198,
  2.49451165014, 0.26672019191, 0.113439144, 3.91705105199, 0.65987085507, 2.62878694178,
  4.53636943501, 2.43413603252, 2.09178645677, 2.45200139206, 3.36004060149, 0.29098540695,
  2.78149967294, 6.20398934398, 3.72079967668};
  const double L_0_C[38] = {0.0, 26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 1109.37855209, 182615.321991, 5661.33204915, 27197.2816937,
  25028.5212114, 31749.2351907, 24978.5245895, 21535.9496445, 208703.225133, 20426.5710924,
  955.599741609, 25558.2121765, 51116.424353, 53285.1848352, 4551.95349706, 15874.6175954,
  529.690965095, 11322.6640983, 1059.38193019, 57837.1383323, 13521.7514416, 27043.5028832,
  51066.4277311, 25661.3049507, 47623.8527861, 24498.8302463, 37410.5672399, 10213.2855462,
  77204.3274945, 234791.128274, 39609.6545832};

  double L0 = 0.0;
  for(int i = 0; i < 38; ++i){
    L0 += L_0_A[i] * cos(L_0_B[i] + L_0_C[i] * astroTime->julianCentury);
  }

  const double L_1_A[16] = {2.60879031369e+12, 1131199.811, 292242.298, 75775.081,
  19676.525, 5119.883, 1336.324, 352.23, 350.236, 93.444, 90.588, 92.259, 51.943,
  44.343, 27.651, 21.994};
  const double L_1_B[16] = {0.0, 6.21874197797, 3.04449355541, 6.08568821653, 2.80965111777,
  5.79432353574, 2.47909947012, 3.05246348628, 5.43397743985, 6.11761855456, 0.00053733031,
  2.09530377053, 5.62157845897, 4.57417248957, 3.03660330131, 0.8647518216};
  const double L_1_C[16] = {0.0, 26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 1109.37855209, 182615.321991, 27197.2816937, 24978.5245895,
  208703.225133, 5661.33204915, 25028.5212114, 51066.4277311, 955.599741609};

  double L1 = 0.0;
  for(int i = 0; i < 16; ++i){
    L1 += L_1_A[i] * cos(L_1_B[i] + L_1_C[i] * astroTime->julianCentury);
  }

  const double L_2_A[10] = {16395.129, 8123.865, 3208.17, 1128.209, 877.186, 371.058,
  116.931, 35.802, 14.897, 10.747};
  const double L_2_B[10] = {4.67759555504, 1.40305644134, 4.49577853102, 1.27901273779,
  3.14159265359, 4.31735787338, 1.04943307731, 4.0458725739, 4.63345988506, 0.74352925179};
  const double L_2_C[10] = {26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  0.0, 130439.515708, 156527.418849, 182615.321991, 1109.37855209, 208703.225133};

  double L2 = 0.0;
  for(int i = 0; i < 10; ++i){
    L2 += L_2_A[i] * cos(L_2_B[i] + L_2_C[i] * astroTime->julianCentury);
  }

  const double L_3_A[8] = {169.496, 155.725, 90.555, 42.769, 17.76, 6.774, 3.486,
  2.435};
  const double L_3_B[8] = {3.20221586818, 6.23814315369, 2.96712953186, 6.01870391709,
  2.78750960026, 5.82756176337, 0.0, 2.56963684564};
  const double L_3_C[8] = {26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 0.0, 182615.321991};

  double L3 = 0.0;
  for(int i = 0; i < 8; ++i){
    L3 += L_3_A[i] * cos(L_3_B[i] + L_3_C[i] * astroTime->julianCentury);
  }

  const double L_4_A[6] = {2.671, 2.079, 2.071, 1.248, 0.641, 0.293};
  const double L_4_B[6] = {4.76418299344, 2.01782765964, 1.47603650163, 4.50170414847,
  1.26049541246, 4.30408398706};
  const double L_4_C[6] = {52175.8062831, 26087.9031416, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849};

  double L4 = 0.0;
  for(int i = 0; i < 6; ++i){
    L4 += L_4_A[i] * cos(L_4_B[i] + L_4_C[i] * astroTime->julianCentury);
  }

  const double L_5_A = 0.039;
  const double L_5_B = 6.22596606829;
  const double L_5_C = 78263.7094247;
  double L5 = L_5_A * cos(L_5_B + L_5_C * astroTime->julianCentury);

  double julianCenturyMultiple = 1.0;
  double LValues[5] = {L0, L1, L2, L3, L4};
  eclipticalLongitude = 0.0;
  for(int i = 0; i < 5; ++i){
    eclipticalLongitude += LValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  eclipticalLongitude = eclipticalLongitude / 1.0e-8;
}

void Mercury::updateEclipticalLatitude(){
  const double B_0_A[14] = {11737528.961, 2388076.996, 1222839.532, 543251.81,
  129778.77, 31866.927, 7963.301, 2014.189, 513.953, 207.674, 208.584, 132.013,
  100.454, 121.395};
  const double B_0_B[14] = {1.98357498767, 5.03738959686, 3.14159265359, 1.79644363964,
  4.83232503958, 1.58088495658, 4.60972126127, 1.35324164377, 4.37835406663, 4.91772567908,
  2.02020295489, 1.11908482553, 5.65684757892, 1.81271747279};
  const double B_0_C[14] = {26087.9031416, 52175.8062831, 0.0, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 182615.321991, 208703.225133, 27197.2816937, 24978.5245895,
  234791.128274, 20426.5710924, 53285.1848352};

  double B0 = 0.0;
  for(int i = 0; i < 14; ++i){
    B0 += B_0_A[i] * cos(B_0_B[i] + B_0_C[i] * astroTime->julianCentury);
  }

  const double B_1_A[11] = {274646.065, 99737.713, 18772.047, 23970.726, 8097.508,
  2890.729, 949.669, 298.013, 90.863, 27.163, 24.677};
  const double B_1_B[11] = {3.95008450011, 3.14159265359, 0.05141288887, 2.53272082947,
  3.20946389315, 0.00943621371, 3.06780459575, 6.11414444304, 2.87023913203, 5.90488705529,
  0.37210176608};
  const double B_1_C[11] = {26087.9031416, 0.0, 78263.7094247, 52175.8062831, 104351.612566,
  130439.515708, 156527.418849, 182615.321991, 208703.225133, 234791.128274, 27197.2816937};

  double B1 = 0.0;
  for(int i = 0; i < 11; ++i){
    B1 += B_1_A[i] * cos(B_1_B[i] + B_1_C[i] * astroTime->julianCentury);
  }

  const double B_2_A[9] = {2747.165, 2047.257, 516.03, 407.309, 266.936, 133.544,
  56.956, 22.049, 8.008};
  const double B_2_B[9] = {5.24567337999, 0.0, 0.49321133154, 4.32215500849, 1.42744634495,
  4.61055165903, 1.44017544018, 4.52127237069, 1.30182043008};
  const double B_2_C[9] = {26087.9031416, 0.0, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 182615.321991, 208703.225133};

  double B2 = 0.0;
  for(int i = 0; i < 9; ++i){
    B2 += B_2_A[i] * cos(B_2_B[i] + B_2_C[i] * astroTime->julianCentury);
  }

  const double B_3_A[7] = {64.68, 30.733, 18.929, 9.797, 6.861, 4.367, 2.344};
  const double B_3_B[7] = {2.16518315874, 0.0, 5.40870348072, 2.41402344018, 5.88312096876,
  2.88362764626, 6.0558166462};
  const double B_3_C[7] = {26087.9031416, 0.0, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849};

  double B3 = 0.0;
  for(int i = 0; i < 7; ++i){
    B3 += B_3_A[i] * cos(B_3_B[i] + B_3_C[i] * astroTime->julianCentury);
  }

  const double B_4_A[2] = {1.427, 0.491};
  const double B_4_B[2] = {4.97519726738, 3.14159265359};
  const double B_4_C[2] = {26087.9031416, 0.0};

  double B4 = 0.0;
  for(int i = 0; i < 2; ++i){
    B4 += B_4_A[i] * cos(B_4_B[i] + B_4_C[i] * astroTime->julianCentury);
  }

  double julianCenturyMultiple = 1.0;
  double BValues[4] = {B0, B1, B2, B3};
  eclipticalLatitude = 0.0;
  for(int i = 0; i < 4; ++i){
    eclipticalLatitude += BValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  eclipticalLatitude = eclipticalLatitude / 1.0e-8;
}

void Mercury::updateRadiusVector(){
  const double R_0_A[13] = {39528271.651, 7834131.818, 795525.558, 121281.764,
  21921.969, 4354.065, 918.228, 260.033, 289.955, 201.855, 201.498, 141.98, 100.144};
  const double R_0_B[13] = {0.0, 6.19233722598, 2.95989690104, 6.01064153797, 2.77820093972,
  5.82894543774, 2.59650562845, 3.02817753901, 1.42441937278, 5.64725040577, 5.59227727403,
  6.25264206514, 3.73435615066};
  const double R_0_C[13] = {0.0, 26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 156527.418849, 27197.2816937, 25028.5212114, 182615.321991, 31749.2351907,
  24978.5245895, 21535.9496445};

  double R0 = 0.0;
  for(int i = 0; i < 13; ++i){
    R0 += R_0_A[i] * cos(R_0_B[i] + R_0_C[i] * astroTime->julianCentury);
  }

  const double R_1_A[8] = {217347.74, 44141.826, 10094.479, 2432.805, 1624.367,
  603.996, 152.851, 39.202};
  const double R_1_B[8] = {4.65617158665, 1.42385544001, 4.47466326327, 1.24226083323,
  0.0, 4.29303116468, 1.06060778072, 4.11136733071};
  const double R_1_C[8] = {26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  0.0, 130439.515708, 156527.418849, 182615.321991};

  double R1 = 0.0;
  for(int i = 0; i < 8; ++i){
    R1 += R_1_A[i] * cos(R_1_B[i] + R_1_C[i] * astroTime->julianCentury);
  }

  const double R_2_A[7] = {3117.867, 1245.397, 424.822, 136.13, 42.176, 21.759,
  12.794};
  const double R_2_B[7] = {3.08231840294, 6.1518331681, 2.92583350003, 5.97983927257,
  2.74936984182, 3.14159265359, 5.80143158303};
  const double R_2_C[7] = {26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708, 0.0, 156527.418849};

  double R2 = 0.0;
  for(int i = 0; i < 7; ++i){
    R2 += R_2_A[i] * cos(R_2_B[i] + R_2_C[i] * astroTime->julianCentury);
  }

  const double R_3_A[5] = {32.676, 24.166, 12.133, 5.141, 1.981};
  const double R_3_B[5] = {1.67971641967, 4.63403168878, 1.38983777816, 4.43915486864,
  1.20734065292};
  const double R_3_C[5] = {26087.9031416, 52175.8062831, 78263.7094247, 104351.612566,
  130439.515708};

  double R3 = 0.0;
  for(int i = 0; i < 5; ++i){
    R3 += R_3_A[i] * cos(R_3_B[i] + R_3_C[i] * astroTime->julianCentury);
  }

  double julianCenturyMultiple = 1.0;
  double RValues[3] = {R0, R1, R2};
  radiusVector = 0.0;
  for(int i = 0; i < 3; ++i){
    radiusVector += RValues[i] * julianCenturyMultiple;
    julianCenturyMultiple *= astroTime->julianCentury;
  }
  radiusVector = radiusVector / 1.0e-8;
}

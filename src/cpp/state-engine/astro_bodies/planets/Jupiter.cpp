#include "../../world_state/AstroTime.h"
#include "../../Constants.h"
#include "../OtherPlanet.h"
#include "Earth.h"
#include "Jupiter.h"
#include <cmath>

//
//Constructor
//
Jupiter::Jupiter(AstroTime* astroTimeRef) : OtherPlanet(astroTimeRef){
  //
  //Default constructor
  //
};

//From page 286 of Meeus
void Jupiter::updateMagnitudeOfPlanet(){
  double phaseAngle = getPhaseAngleInDegrees();
  irradianceFromEarth = -9.40 + 5.0 * log(distanceFromSun * distanceFromEarth) + 0.005 * phaseAngle;
};

void Jupiter::updateEclipticalLongitude(){
  const double L_0_A[64] = {59954691.0, 9695899.0, 573610.0, 306389.0, 97187.0,
    72903.0, 64264.0, 39806.0, 38858.0, 27965.0, 13590.0, 8769.0, 8246.0, 7368.0,
    6263.0, 6114.0, 5305.0, 5305.0, 4905.0, 4647.0, 3045.0, 2610.0, 2028.0, 1921.0,
    1765.0, 1723.0, 1633.0, 1432.0, 973.0, 884.0, 733.0, 731.0, 709.0, 692.0, 614.0,
    582.0, 495.0, 441.0, 417.0, 390.0, 376.0, 341.0, 330.0, 262.0, 261.0, 257.0,
    244.0, 235.0, 220.0, 207.0, 202.0, 197.0, 175.0, 175.0, 175.0, 158.0, 151.0,
    149.0, 141.0, 138.0, 131.0, 117.0, 117.0, 106.0};
  const double L_0_B[64] = {0.0, 5.0619179, 1.444062, 5.417347, 4.14265, 3.64043,
    3.41145, 2.29377, 1.27232, 1.78455, 5.77481, 3.630, 3.5823, 5.081, 0.025,
    4.5132, 4.1863, 1.3067, 1.3208, 4.6996, 4.3168, 1.5667, 1.0638, 0.9717, 2.1415,
    3.8804, 3.5820, 4.2968, 4.098, 2.437, 6.085, 3.806, 1.293, 6.134, 4.109, 4.540,
    3.756, 2.958, 1.036, 4.897, 4.703, 5.715, 4.740, 1.877, 0.820, 3.724, 5.22,
    1.227, 1.651, 1.855, 1.807, 5.293, 3.730, 3.226, 5.910, 4.365, 3.906, 4.377,
    3.136, 1.318, 4.169, 2.5, 3.389, 4.554};
  const double L_0_C[64] = {0.0, 529.6909651, 7.113547, 1059.381930, 632.78374, 522.57742,
    103.09277, 419.48464, 316.39187, 536.80451, 1589.07290, 949.1756, 206.1855, 735.8765,
    213.2991, 1162.4747, 1052.2684, 14.2271, 110.2063, 3.9322, 426.5982, 846.0828,
    3.1814, 639.8973, 1066.4955, 1265.5675, 515.4639, 625.6702, 95.979, 412.371,
    838.969, 1581.959, 742.990, 2118.764, 1478.867, 309.278, 323.505, 454.909, 2.448,
    1692.166, 1368.660, 533.623, 0.048, 0.0963, 380.128, 199.072, 728.763, 909.819,
    543.918, 525.759, 1375.774, 115.361, 942.062, 1898.351, 956.289, 1795.258,
    74.782, 1685.052, 491.558, 1169.588, 1045.155, 1596.186, 0.521, 526.510};

  double L0 = 0.0;
  for(int i = 0; i < 64; ++i){
    L0 += L_0_A[i] * cos(L_0_B[i] + L_0_C[i] * astroTime->julianMilliennia);
  }

  const double L_1_A[61] = {52993480757.0, 489741.0, 228919.0, 27655.0, 20721.0, 12106.0, 6068.0,
  5434.0, 4238.0, 2212.0, 1746.0, 1296.0, 1173.0, 1163.0, 1099.0, 1007.0, 1004.0,
  848.0, 827.0, 816.0, 725.0, 568.0, 474.0, 413.0, 345.0, 336.0, 234.0, 234.0,
  199.0, 195.0, 187.0, 184.0, 171.0, 131.0, 115.0, 115.0, 108.0, 80.0, 72.0,
  70.0, 67.0, 66.0, 65.0, 59.0, 58.0, 57.0, 57.0, 55.0, 52.0, 52.0, 50.0, 47.0,
  47.0, 40.0, 34.0, 33.0, 32.0, 29.0, 29.0, 29.0, 25.0};
  const double L_1_B[61] = {0.0, 4.220667, 6.026475, 4.57266, 5.45939, 0.16986, 4.4242,
  3.9848, 5.8901, 5.2677, 4.9267, 5.5513, 5.8655, 0.5145, 5.307, 0.4648, 3.1504,
  5.758, 4.803, 0.586, 5.518, 5.989, 4.132, 5.737, 4.242, 3.732, 4.035, 6.243,
  1.505, 2.219, 6.086, 6.280, 5.417, 0.636, 0.680, 5.286, 4.493, 5.82, 5.34, 5.97,
  5.73, 0.13, 6.09, 0.59, 0.99, 5.97, 1.41, 5.43, 5.79, 0.23, 6.08, 3.63, 0.51,
  4.16, 0.1, 5.04, 5.37, 5.42, 3.36, 0.76, 1.61};
  const double L_1_C[61] = {0.0, 529.690965, 7.113547, 1059.38193, 522.57742, 536.80451,
  103.0928, 419.4846, 14.2271, 206.1855, 1589.0729, 3.1814, 1052.2684, 3.9322,
  515.4639, 735.876, 426.5982, 110.206, 213.299, 1066.495, 639.897, 625.670,
  412.371, 95.979, 632.784, 1162.475, 949.176, 309.278, 838.969, 323.505,
  742.990, 543.918, 199.072, 728.763, 846.083, 2118.764, 956.289, 1045.15,
  942.06, 532.87, 21.34, 526.51, 1581.96, 1155.36, 1596.19, 1169.59, 533.62,
  10.29, 117.32, 1368.66, 525.76, 1478.87, 1265.57, 1692.17, 302.16, 220.41,
  508.35, 1272.68, 4.67, 88.87, 831.86};

  double L1 = 0.0;
  for(int i = 0; i < 61; ++i){
    L1 += L_1_A[i] * cos(L_1_B[i] + L_1_C[i] * astroTime->julianMilliennia);
  }

  const double L_2_A[57] = {47234.0, 38966.0, 30629.0, 3189.0, 2729.0, 2723.0,
    1721.0, 383.0, 378.0, 367.0, 337.0, 308.0, 218.0, 199.0, 197.0, 156.0, 146.0,
    142.0, 130.0, 117.0, 97.0, 91.0, 87.0, 79.0, 72.0, 58.0, 57.0, 49.0, 40.0,
    40.0, 36.0, 29.0, 28.0, 26.0, 26.0, 25.0, 24.0, 19.0, 18.0, 17.0, 17.0, 15.0,
    15.0, 15.0, 14.0, 14.0, 13.0, 13.0, 11.0, 10.0, 9.0, 9.0, 9.0, 8.0, 8.0, 7.0, 6.0};
  const double L_2_B[57] = {4.32148, 0.0, 2.93021, 1.055, 4.8455, 3.4141, 4.1873,
    5.768, 0.76, 6.055, 3.786, 0.694, 3.814, 5.340, 2.484, 1.406, 3.814, 1.634,
    5.837, 1.414, 4.03, 1.11, 2.52, 4.64, 2.22, 0.83, 3.12, 1.67, 4.02, 0.62, 2.33,
    3.61, 3.24, 4.50, 2.51, 1.22, 3.01, 4.29, 0.81, 4.20, 1.83, 5.81, 0.68, 4.0,
    5.95, 1.8, 2.52, 4.37, 4.44, 1.72, 2.18, 3.29, 3.32, 5.76, 2.71, 2.18, 0.5};
  const double L_2_C[57] = {7.11355, 0.0, 529.69097, 522.5774, 536.804, 1059.3819,
    14.2271, 419.485, 515.464, 103.093, 3.181, 206.186, 1589.073, 1066.495, 3.932,
    1052.268, 639.897, 426.598, 412.371, 625.670, 110.21, 95.98, 632.78, 543.92,
    735.88, 199.07, 213.30, 309.28, 21.34, 323.51, 728.76, 10.29, 838.97, 742.99,
    1162.47, 1045.15, 956.29, 532.87, 508.35, 2118.76, 526.51, 1596.19, 942.06,
    117.32, 316.39, 302.16, 88.87, 1169.59, 525.76, 1581.96, 1155.366, 220.41,
    831.86, 846.08, 533.62, 1265.57, 949.18};

  double L2 = 0.0;
  for(int i = 0; i < 57; ++i){
    L2 += L_2_A[i] * cos(L_2_B[i] + L_2_C[i] * astroTime->julianMilliennia);
  }

  const double L_3_A[39] = {6502.0, 1357.0, 471.0, 417.0, 353.0, 155.0, 87.0, 44.0,
    34.0, 28.0, 24.0, 23.0, 20.0, 20.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0,
    22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0,
    35.0, 36.0, 37.0, 38.0, 39.0};
  const double L_3_B[39] = {2.5986, 1.3464, 2.475, 3.245, 2.974, 2.076, 2.51, 0.0,
    3.83, 2.45, 1.28, 2.98, 2.10, 1.40, 1.59, 2.30, 2.6, 3.15, 3.36, 2.76, 2.54,
    6.27, 1.76, 2.27, 3.43, 4.04, 2.52, 2.91, 5.25, 4.30, 3.52, 4.09, 1.43, 4.36,
    1.25, 5.02, 2.24, 2.9, 2.36};
  const double L_3_C[39] = {7.1135, 529.691, 14.227, 536.805, 522.577, 1059.382,
    515.46, 0.0, 1066.50, 206.19, 412.37, 543.92, 639.90, 419.48, 103.09, 21.34,
    1589.07, 625.67, 1052.27, 95.98, 199.07, 426.60, 10.29, 110.21, 309.28, 728.76,
    508.35, 1045.15, 323.51, 88.87, 302.16, 735.88, 956.29, 1596.19, 213.30, 838.97,
    117.32, 742.99, 942.06};

  double L3 = 0.0;
  for(int i = 0; i < 39; ++i){
    L3 += L_3_A[i] * cos(L_3_B[i] + L_3_C[i] * astroTime->julianMilliennia);
  }

  const double L_4_A[19] = {669.0, 114.0, 100.0, 50.0, 44.0, 32.0, 15.0, 99.0,
    5.0, 4.0, 4.0, 3.0, 2.0, 2.0, 2.0, 2.0, 1.0, 1.0, 1.0};
  const double L_4_B[19] = {0.853, 3.142, 0.743, 1.65, 5.82, 4.86, 4.29, 0.71,
    1.30, 2.32, 0.48, 3.00, 0.40, 4.26, 4.91, 4.26, 5.26, 4.72, 1.29};
  const double L_4_C[19] = {7.114, 0.0, 14.227, 536.80, 529.69, 522.58, 515.46,
    1059.38, 543.92, 1066.50, 21.34, 412.37, 639.90, 199.07, 625.67, 206.19,
    1052.27, 95.98, 1589.07};

  double L4 = 0.0;
  for(int i = 0; i < 19; ++i){
    L4 += L_4_A[i] * cos(L_4_B[i] + L_4_C[i] * astroTime->julianMilliennia);
  }

  const double L_5_A[5] = {50.0, 16.0, 4.0, 2.0, 1.0};
  const double L_5_B[5] = {5.26, 5.25, 0.01, 3.14};
  const double L_5_C[5] = {7.11, 14.23, 536.80, 522.58, 0.0};

  double L5 = 0.0;
  for(int i = 0; i < 5; ++i){
    L5 += L_5_A[i] * cos(L_5_B[i] + L_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double LValues[6] = {L0, L1, L2, L3, L4, L5};
  eclipticalLongitude = 0.0;
  for(int i = 0; i < 6; ++i){
    eclipticalLongitude += LValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLongitude *= 1.0e-8;
  eclipticalLongitude = fmod(eclipticalLongitude, PI_TIMES_TWO);
  eclipticalLongitude = eclipticalLongitude < 0 ?  PI_TIMES_TWO + eclipticalLongitude : eclipticalLongitude;
}

void Jupiter::updateEclipticalLatitude(){
  const double B_0_A[26] = {2268616.0, 110090.0, 109972.0, 8101.0, 6438.0, 6044.0,
    1107.0, 944.0, 942.0, 894.0, 836.0, 767.0, 684.0, 629.0, 559.0, 532.0, 464.0,
    431.0, 351.0, 132.0, 123.0, 116.0, 115.0, 104.0, 103.0, 102.0};
  const double B_0_B[26] = {3.5585261, 0.0, 3.908093, 3.6051, 0.3063, 4.2588,
    2.9853, 1.675, 2.936, 1.754, 5.179, 2.155, 3.678, 0.643, 0.014, 2.703, 1.173,
    2.608, 4.611, 4.778, 3.35, 1.387, 5.049, 3.701, 2.319, 3.153};
  const double B_0_C[26] = {529.6909651, 0.0, 1059.381930, 522.5774, 536.8045,
    1589.0729, 1162.4747, 426.598, 1052.268, 7.114, 103.093, 632.784, 213.299,
    1066.495, 846.083, 110.206, 949.176, 419.485, 2118.764, 742.990, 1692.166,
    323.505, 316.392, 515.464, 1478.867, 1581.959};

  double B0 = 0.0;
  for(int i = 0; i < 26; ++i){
    B0 += B_0_A[i] * cos(B_0_B[i] + B_0_C[i] * astroTime->julianMilliennia);
  }

  const double B_1_A[22] = {177352.0, 3230.0, 3081.0, 2212.0, 1694.0, 346.0,
    234.0, 196.0, 150.0, 114.0, 97.0, 82.0, 77.0, 77.0, 74.0, 61.0, 50.0, 46.0,
    45.0, 37.0, 36.0, 32.0};
  const double B_1_B[22] = {5.701665, 5.7794, 5.4746, 4.7348, 3.1416, 4.746,
    5.189, 6.186, 3.927, 3.439, 2.91, 5.08, 2.51, 0.61, 5.5, 5.45, 3.95, 0.54,
    1.9, 4.7, 6.11, 4.92};
  const double B_1_C[22] = {529.690965, 1059.3819, 522.5774, 536.8045, 0.0,
    1052.268, 1066.495, 7.114, 1589.073, 632.784, 949.18, 1162.47, 103.09,
    419.48, 515.46, 213.30, 735.88, 110.21, 846.08, 543.92, 316.39, 1581.96};

  double B1 = 0.0;
  for(int i = 0; i < 22; ++i){
    B1 += B_1_A[i] * cos(B_1_B[i] + B_1_C[i] * astroTime->julianMilliennia);
  }

  const double B_2_A[14] = {8094.0, 813.0, 742.0, 399.0, 342.0, 74.0, 46.0, 30.0,
    29.0, 23.0, 14.0, 12.0, 11.0, 6.0};
  const double B_2_B[14] = {1.4632, 3.1416, 0.957, 2.899, 1.447, 0.41, 3.48,
    1.93, 0.99, 4.27, 2.92, 5.22, 4.88, 6.21};
  const double B_2_C[14] = {529.691, 0.0, 522.577, 536.805, 1059.382, 1052.27,
    1066.50, 1589.07, 515.46, 7.11, 543.92, 632.78, 949.18, 1045.15};

  double B2 = 0.0;
  for(int i = 0; i < 14; ++i){
    B2 += B_2_A[i] * cos(B_2_B[i] + B_2_C[i] * astroTime->julianMilliennia);
  }

  const double B_3_A[9] = {252.0, 122.0, 49.0, 11.0, 8.0, 7.0, 6.0, 4.0, 3.0};
  const double B_3_B[9] = {3.381, 2733, 1.04, 2.31, 2.77, 4.25, 1.78, 1.13, 3.14};
  const double B_3_C[9] = {529.691, 522.577, 536.80, 1052.27, 515.46, 1059.38,
    1066.50, 543.92, 0.0};

  double B3 = 0.0;
  for(int i = 0; i < 9; ++i){
    B3 += B_3_A[i] * cos(B_3_B[i] + B_3_C[i] * astroTime->julianMilliennia);
  }

  const double B_4_A[6] = {15.0, 5.0, 4.0, 3.0, 2.0, 1.0};
  const double B_4_B[6] = {4.53, 4.47, 5.44, 0.0, 4.52, 4.2};
  const double B_4_C[6] = {522.58, 529.69, 536.80, 0.0, 515.46, 1052.27};

  double B4 = 0.0;
  for(int i = 0; i < 6; ++i){
    B4 += B_4_A[i] * cos(B_4_B[i] + B_4_C[i] * astroTime->julianMilliennia);
  }

  const double B_5_A = 1.0;
  const double B_5_B = 0.09;
  const double B_5_C = 522.58;
  double B5 = B_5_A * cos(B_5_B + B_5_C * astroTime->julianMilliennia);

  double julianMillienniaMultiple = 1.0;
  double BValues[6] = {B0, B1, B2, B3, B4, B5};
  eclipticalLatitude = 0.0;
  for(int i = 0; i < 6; ++i){
    eclipticalLatitude += BValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  eclipticalLatitude *= 1.0e-8;
}

void Jupiter::updateRadiusVector(){
  const double R_0_A[46] = {520887429.0, 25209327.0, 610600.0, 282029.0, 187647.0,
    86793.0, 72063.0, 65517.0, 30135.0, 29135.0, 23947.0, 23453.0, 22284.0,
    13033.0, 12749.0, 9703.0, 9161.0, 7895.0, 7058.0, 6138.0, 5477.0, 4170.0,
    4137.0, 3503.0, 2617.0, 2500.0, 2128.0, 1912.0, 1611.0, 1479.0, 1231.0,
    1217.0, 1015.0, 999.0, 961.0, 886.0, 821.0, 812.0, 777.0, 727.0, 655.0,
    654.0, 621.0, 612.0, 562.0, 542.0};
  const double R_0_B[46] = {0.0, 3.49108640, 3.841154, 2.574199, 2.075904, 0.71001,
    0.21466, 5.97996, 2.16132, 1.67759, 0.27458, 3.54023, 4.19363, 2.96043,
    2.71550, 1.9067, 4.4135, 2.4791, 2.1818, 6.2642, 5.6573, 2.0161, 2.7222,
    0.5653, 2.0099, 4.5518, 6.1275, 0.8562, 3.0887, 2.6803, 1.8904, 1.8017,
    1.3867, 2.872, 4.549, 4.148, 1.593, 5.941, 3.677, 3.988, 2.791, 3.382,
    4.823, 2.276, 0.081, 0.284};
  const double R_0_C[46] = {0.0, 529.69096509, 1059.381930, 632.783739, 522.577418,
    419.48464, 536.80451, 316.39187, 949.17561, 103.09277, 7.11355, 735.87651,
    1589.0729, 1162.4747, 1052.26838, 206.1855, 213.2991, 426.5982, 1265.5675,
    846.0828, 639.8973, 515.4639, 625.6702, 1066.4955, 1581.9593, 838.9693,
    742.9901, 412.3711, 1368.6603, 1478.8666, 323.5054, 110.2063, 454.9094,
    309.278, 2118.764, 533.623, 1898.351, 909.819, 728.763, 1155.361, 1685.052,
    1692.166, 959.289, 942.062, 543.918, 525.759};

  double R0 = 0.0;
  for(int i = 0; i < 46; ++i){
    R0 += R_0_A[i] * cos(R_0_B[i] + R_0_C[i] * astroTime->julianMilliennia);
  }

  const double R_1_A[43] = {1271802.0, 61662.0, 53444.0, 41390.0, 31185.0, 11847.0,
    9166.0, 3404.0, 3203.0, 3176.0, 2806.0, 2677.0, 2600.0, 2412.0, 2101.0, 1646.0,
    1641.0, 1050.0, 1025.0, 806.0, 741.0, 677.0, 567.0, 485.0, 469.0, 445.0, 416.0,
    402.0, 347.0, 338.0, 261.0, 247.0, 220.0, 203.0, 200.0, 197.0, 196.0, 184.0,
    180.0, 170.0, 146.0, 133.0, 132.0};
  const double R_1_B[43] = {2.6493751, 3.00076, 3.89718, 0.0, 4.88277, 2.4133,
    4.7598, 3.3469, 5.2108, 2.793, 3.7422, 4.3305, 3.6344, 1.4695, 3.9276, 5.3095,
    4.4163, 3.1611, 2.5543, 2.678, 2.171, 6.25, 4.577, 2.469, 4.71, 0.403, 5.368,
    4.605, 4.681, 3.168, 5.343, 3.923, 4.842, 5.6, 4.439, 3.706, 3.759, 4.265, 4.402,
    4.846, 6.13, 1.322, 4.512};
  const double R_1_C[43] = {529.6909651, 105938193, 522.57742, 0.0, 536.80451,
    419.48464, 7.1135, 1589.0729, 735.8765, 103.0928, 515.4639, 1052.2684,
    206.1855, 426.5982, 639.8973, 1066.4955, 625.6702, 213.2991, 412.3711,
    632.784, 1162.475, 838.969, 742.990, 949.176, 543.918, 323.505, 728.763,
    309.278, 14.227, 956.289, 846.083, 942.062, 1368.660, 1155.361, 1045.155,
    2118.764, 199.072, 95.979, 523.872, 526.51, 533.623, 110.206, 525.759};

  double R1 = 0.0;
  for(int i = 0; i < 43; ++i){
    R1 += R_1_A[i] * cos(R_1_B[i] + R_1_C[i] * astroTime->julianMilliennia);
  }

  const double R_2_A[36] = {79645.0, 8252.0, 7030.0, 5314.0, 1861.0, 964.0, 836.0,
    498.0, 427.0, 406.0, 377.0, 363.0, 342.0, 339.0, 333.0, 280.0, 257.0, 230.0, 201.0,
    200.0, 139.0, 114.0, 95.0, 86.0, 83.0, 80.0, 75.0, 70.0, 67.0, 62.0, 56.0, 52.0,
    50.0, 45.0};
  const double R_2_B[36] = {1.35866, 5.7777, 3.2748, 1.8384, 2.9768, 5.48, 4.199,
    3.142, 2.228, 3.783, 2.242, 5.368, 6.099, 6.127, 0.003, 4.262, 0.963, 0.705,
    3.069, 4.429, 2.932, 0.787, 1.7, 5.14, 0.06, 2.98, 1.6, 1.51, 5.47, 6.1, 0.96,
    5.58, 2.72, 5.52, 0.27, 5.95};
  const double R_2_C[36] = {529.69097, 522.5774, 5368045, 1059.3819, 7.1135,
    515.464, 419.485, 0.0, 639.897, 1066.495, 1589.073, 206.186, 1052.268, 625.67,
    426.598, 412.371, 632.784, 735.877, 543.918, 103.093, 14.227, 728.763, 838.97,
    323.51, 309.28, 742.99, 956.29, 213.30, 199.07, 1045.15, 1162.47, 942.06,
    532.87, 508.35, 526.51, 95.98};

  double R2 = 0.0;
  for(int i = 0; i < 36; ++i){
    R2 += R_2_A[i] * cos(R_2_B[i] + R_2_C[i] * astroTime->julianMilliennia);
  }

  const double R_3_A[28] = {3519.0, 1073.0, 916.0, 342.0, 255.0, 222.0, 90.0, 69.0,
    58.0, 58.0, 51.0, 47.0, 43.0, 37.0, 34.0, 34.0, 31.0, 30.0, 21.0, 15.0, 14.0,
    13.0, 12.0, 12.0, 11.0, 11.0, 10.0, 9.0};
  const double R_3_B[28] = {6.058, 1.6732, 1.413, 0.523, 1.196, 0.952, 3.14, 2.27,
    1.41, 0.53, 5.98, 1.58, 6.12, 1.18, 1.67, 0.85, 1.04, 4.63, 2.5, 0.89, 0.96,
    1.5, 2.61, 3.56, 1.79, 6.28, 6.26, 3.45};
  const double R_3_C[28] = {529.691, 536.8045, 522.577, 1059.382, 7.114, 515.464,
    0.0, 1066.50, 543.92, 639.90, 412.37, 625.67, 419.48, 14.23, 1052.27, 206.19,
    1589.07, 426.60, 728.76, 199.07, 508.35, 1045.15, 735.88, 323.51, 309.28,
    956.29, 103.9, 838.97};

  double R3 = 0.0;
  for(int i = 0; i < 28; ++i){
    R3 += R_3_A[i] * cos(R_3_B[i] + R_3_C[i] * astroTime->julianMilliennia);
  }

  const double R_4_A[15] = {129.0, 113.0, 83.0, 38.0, 27.0, 18.0, 13.0, 9.0, 8.0,
    7.0, 6.0, 5.0, 3.0, 3.0, 3.0};
  const double R_4_B[15] = {0.84, 4.249, 3.3, 2.73, 5.69, 5.4, 6.02, 0.77, 5.68,
    1.43, 5.12, 3.34, 3.4, 4.16, 2.9};
  const double R_4_C[15] = {536.805, 529.691, 522.58, 515.46, 7.11, 1059.38, 543.92,
    1066.5, 14.23, 412.37, 639.9, 625.67, 1052.27, 728.76, 426.6};

  double R4 = 0.0;
  for(int i = 0; i < 15; ++i){
    R4 += R_4_A[i] * cos(R_4_B[i] + R_4_C[i] * astroTime->julianMilliennia);
  }

  const double R_5_A[7] = {11.0, 4.0, 2.0, 2.0, 2.0, 2.0, 4.0};
  const double R_5_B[7] = {4.75, 5.92, 5.57, 4.3, 3.69, 4.13, 5.49};
  const double R_5_C[7] = {539.8, 522.58, 515.46, 543.92, 7.11, 1059.38, 1066.5};

  double R5 = 0.0;
  for(int i = 0; i < 7; ++i){
    R5 += R_5_A[i] * cos(R_5_B[i] + R_5_C[i] * astroTime->julianMilliennia);
  }

  double julianMillienniaMultiple = 1.0;
  double RValues[6] = {R0, R1, R2, R3, R4, R5};
  radiusVector = 0.0;
  for(int i = 0; i < 6; ++i){
    radiusVector += RValues[i] * julianMillienniaMultiple;
    julianMillienniaMultiple *= astroTime->julianMilliennia;
  }
  radiusVector *= 1.0e-8;
}

export default function KthInscatteringMaterial(){
  return({
    uniforms: {
      transmittanceTexture: {value: null},
      inscatteredLightLUT: {value: null},
    },
    fragmentShader: function(numberOfPoints, textureWidth, textureHeight, packingWidth, packingHeight, mieGCoefficient, isRayleigh, atmosphereFunctions){
      const originalGLSL = [
        {fragment_glsl}
      ];

      const updatedLines = [];
      const numberOfChunks = numberOfPoints - 1;
      const textureDepth = packingWidth * packingHeight;
      for(let i = 0, numLines = originalGLSL.length; i < numLines; ++i){
        let updatedGLSL = originalGLSL[i].replace(/\$numberOfChunksInt/g, numberOfChunks);
        updatedGLSL = updatedGLSL.replace(/\$atmosphericFunctions/g, atmosphereFunctions);
        updatedGLSL = updatedGLSL.replace(/\$numberOfChunks/g, numberOfChunks.toFixed(1));
        updatedGLSL = updatedGLSL.replace(/\$mieGCoefficient/g, mieGCoefficient.toFixed(16));

        //Texture constants
        updatedGLSL = updatedGLSL.replace(/\$textureDepth/g, textureDepth.toFixed(1));
        updatedGLSL = updatedGLSL.replace(/\$textureWidth/g, textureWidth.toFixed(1));
        updatedGLSL = updatedGLSL.replace(/\$textureHeight/g, textureHeight.toFixed(1));
        updatedGLSL = updatedGLSL.replace(/\$packingWidth/g, packingWidth.toFixed(1));
        updatedGLSL = updatedGLSL.replace(/\$packingHeight/g, packingHeight.toFixed(1));


        //Choose which texture to use
        updatedGLSL = updatedGLSL.replace(/\$isRayleigh/g, isRayleigh ? '1' : '0');

        updatedLines.push(updatedGLSL);
      }

      return updatedLines.join('\n');
    }
  });
};

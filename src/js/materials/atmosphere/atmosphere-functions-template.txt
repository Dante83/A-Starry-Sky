//This is not your usual file, instead it is a kind of fragment file that contains
//a partial glsl fragment file with functions that are used in multiple locations
StarrySky.Materials.Atmosphere.atmosphereFunctions = {
  partialFragmentShader: function(textureWidth, textureHeight, packingWidth, packingHeight, atmosphericParameters){
    let originalGLSL = [
      {fragment_glsl}
    ];

    const mieG = atmosphericParameters.mieDirectionalG;
    const textureDepth = packingWidth * packingHeight;
    const mieGSquared = mieG * mieG;
    const miePhaseCoefficient = (1.5 * (1.0 - mieGSquared) / (2.0 + mieGSquared));
    console.log(atmosphericParameters);
    const ozBet = atmosphericParameters.ozoneBeta;
    const mieBet = atmosphericParameters.mieBeta;
    const rayBet = atmosphericParameters.rayleighBeta;
    const ozoneBeta = `vec3(${ozBet.red.toFixed(16)}, ${ozBet.green.toFixed(16)}, ${ozBet.blue.toFixed(16)})`;
    const mieBeta = `vec3(${mieBet.red.toFixed(16)}, ${mieBet.green.toFixed(16)}, ${mieBet.blue.toFixed(16)})`;
    console.log(rayBet);
    const rayleighBeta = `vec3(${rayBet.red.toFixed(16)}, ${rayBet.green.toFixed(16)}, ${rayBet.blue.toFixed(16)})`;

    let updatedLines = [];
    for(let i = 0, numLines = originalGLSL.length; i < numLines; ++i){
      let updatedGLSL = originalGLSL[i].replace(/\$textureWidth/g, textureWidth.toFixed(1));
      updatedGLSL = updatedGLSL.replace(/\$textureHeight/g, textureHeight.toFixed(1));
      updatedGLSL = updatedGLSL.replace(/\$textureDepth/g, textureDepth.toFixed(1));
      updatedGLSL = updatedGLSL.replace(/\$packingWidth/g, packingWidth.toFixed(1));
      updatedGLSL = updatedGLSL.replace(/\$packingHeight/g, packingHeight.toFixed(1));
      updatedGLSL = updatedGLSL.replace(/\$ozonePercentOfRayleigh/g, atmosphericParameters.ozonePercentOfRayleigh.toFixed(16));

      updatedGLSL = updatedGLSL.replace(/\$ozoneBeta/g, ozoneBeta);
      updatedGLSL = updatedGLSL.replace(/\$mieBeta/g, mieBeta);
      updatedGLSL = updatedGLSL.replace(/\$rayleighBeta/g, rayleighBeta);

      updatedGLSL = updatedGLSL.replace(/\$mieGSquared/g, mieGSquared.toFixed(16));
      updatedGLSL = updatedGLSL.replace(/\$miePhaseFunctionCoefficient/g, miePhaseCoefficient.toFixed(16));
      updatedGLSL = updatedGLSL.replace(/\$mieG/g, mieG.toFixed(16));

      updatedLines.push(updatedGLSL);
    }

    return updatedLines.join('\n');
  }
}
